// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// UpdateScheduleUpdateScheduleParametersAttributionActor - The attribution-actor of the scheduled pipeline.
type UpdateScheduleUpdateScheduleParametersAttributionActor string

const (
	UpdateScheduleUpdateScheduleParametersAttributionActorCurrent UpdateScheduleUpdateScheduleParametersAttributionActor = "current"
	UpdateScheduleUpdateScheduleParametersAttributionActorSystem  UpdateScheduleUpdateScheduleParametersAttributionActor = "system"
)

func (e UpdateScheduleUpdateScheduleParametersAttributionActor) ToPointer() *UpdateScheduleUpdateScheduleParametersAttributionActor {
	return &e
}

func (e *UpdateScheduleUpdateScheduleParametersAttributionActor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "current":
		fallthrough
	case "system":
		*e = UpdateScheduleUpdateScheduleParametersAttributionActor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleUpdateScheduleParametersAttributionActor: %v", v)
	}
}

// UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek - Day in a week, in three letters format
type UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek string

const (
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekTue UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek = "TUE"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekSat UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek = "SAT"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekSun UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek = "SUN"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekMon UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek = "MON"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekThu UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek = "THU"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekWed UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek = "WED"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekFri UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek = "FRI"
)

func (e UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek) ToPointer() *UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek {
	return &e
}

func (e *UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek: %v", v)
	}
}

// UpdateScheduleUpdateScheduleParametersTimetableMonths - Month, in three letters format.
type UpdateScheduleUpdateScheduleParametersTimetableMonths string

const (
	UpdateScheduleUpdateScheduleParametersTimetableMonthsMar UpdateScheduleUpdateScheduleParametersTimetableMonths = "MAR"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsNov UpdateScheduleUpdateScheduleParametersTimetableMonths = "NOV"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsDec UpdateScheduleUpdateScheduleParametersTimetableMonths = "DEC"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsJun UpdateScheduleUpdateScheduleParametersTimetableMonths = "JUN"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsMay UpdateScheduleUpdateScheduleParametersTimetableMonths = "MAY"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsOct UpdateScheduleUpdateScheduleParametersTimetableMonths = "OCT"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsFeb UpdateScheduleUpdateScheduleParametersTimetableMonths = "FEB"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsApr UpdateScheduleUpdateScheduleParametersTimetableMonths = "APR"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsSep UpdateScheduleUpdateScheduleParametersTimetableMonths = "SEP"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsAug UpdateScheduleUpdateScheduleParametersTimetableMonths = "AUG"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsJan UpdateScheduleUpdateScheduleParametersTimetableMonths = "JAN"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsJul UpdateScheduleUpdateScheduleParametersTimetableMonths = "JUL"
)

func (e UpdateScheduleUpdateScheduleParametersTimetableMonths) ToPointer() *UpdateScheduleUpdateScheduleParametersTimetableMonths {
	return &e
}

func (e *UpdateScheduleUpdateScheduleParametersTimetableMonths) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = UpdateScheduleUpdateScheduleParametersTimetableMonths(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleUpdateScheduleParametersTimetableMonths: %v", v)
	}
}

// UpdateScheduleUpdateScheduleParametersTimetable - Timetable that specifies when a schedule triggers.
type UpdateScheduleUpdateScheduleParametersTimetable struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeek `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day,omitempty"`
	// Months in which the schedule triggers.
	Months []UpdateScheduleUpdateScheduleParametersTimetableMonths `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour *int64 `json:"per-hour,omitempty"`
}

// UpdateScheduleUpdateScheduleParameters - The parameters for an update schedule request
type UpdateScheduleUpdateScheduleParameters struct {
	// The attribution-actor of the scheduled pipeline.
	AttributionActor *UpdateScheduleUpdateScheduleParametersAttributionActor `json:"attribution-actor,omitempty"`
	// Description of the schedule.
	Description *string `json:"description,omitempty"`
	// Name of the schedule.
	Name *string `json:"name,omitempty"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// Timetable that specifies when a schedule triggers.
	Timetable *UpdateScheduleUpdateScheduleParametersTimetable `json:"timetable,omitempty"`
}

type UpdateScheduleRequest struct {
	RequestBody *UpdateScheduleUpdateScheduleParameters `request:"mediaType=application/json"`
	// The unique ID of the schedule.
	ScheduleID string `pathParam:"style=simple,explode=false,name=schedule-id"`
}

// UpdateScheduleDefaultApplicationJSON - Error response.
type UpdateScheduleDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// UpdateScheduleScheduleUser - The attribution actor who will run the scheduled pipeline.
type UpdateScheduleScheduleUser struct {
	// The unique ID of the user.
	ID string `json:"id"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
	// The name of the user.
	Name string `json:"name"`
}

// UpdateScheduleScheduleTimetable2DaysOfWeek - Day in a week, in three letters format
type UpdateScheduleScheduleTimetable2DaysOfWeek string

const (
	UpdateScheduleScheduleTimetable2DaysOfWeekTue UpdateScheduleScheduleTimetable2DaysOfWeek = "TUE"
	UpdateScheduleScheduleTimetable2DaysOfWeekSat UpdateScheduleScheduleTimetable2DaysOfWeek = "SAT"
	UpdateScheduleScheduleTimetable2DaysOfWeekSun UpdateScheduleScheduleTimetable2DaysOfWeek = "SUN"
	UpdateScheduleScheduleTimetable2DaysOfWeekMon UpdateScheduleScheduleTimetable2DaysOfWeek = "MON"
	UpdateScheduleScheduleTimetable2DaysOfWeekThu UpdateScheduleScheduleTimetable2DaysOfWeek = "THU"
	UpdateScheduleScheduleTimetable2DaysOfWeekWed UpdateScheduleScheduleTimetable2DaysOfWeek = "WED"
	UpdateScheduleScheduleTimetable2DaysOfWeekFri UpdateScheduleScheduleTimetable2DaysOfWeek = "FRI"
)

func (e UpdateScheduleScheduleTimetable2DaysOfWeek) ToPointer() *UpdateScheduleScheduleTimetable2DaysOfWeek {
	return &e
}

func (e *UpdateScheduleScheduleTimetable2DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = UpdateScheduleScheduleTimetable2DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleScheduleTimetable2DaysOfWeek: %v", v)
	}
}

// UpdateScheduleScheduleTimetable2Months - Month, in three letters format.
type UpdateScheduleScheduleTimetable2Months string

const (
	UpdateScheduleScheduleTimetable2MonthsMar UpdateScheduleScheduleTimetable2Months = "MAR"
	UpdateScheduleScheduleTimetable2MonthsNov UpdateScheduleScheduleTimetable2Months = "NOV"
	UpdateScheduleScheduleTimetable2MonthsDec UpdateScheduleScheduleTimetable2Months = "DEC"
	UpdateScheduleScheduleTimetable2MonthsJun UpdateScheduleScheduleTimetable2Months = "JUN"
	UpdateScheduleScheduleTimetable2MonthsMay UpdateScheduleScheduleTimetable2Months = "MAY"
	UpdateScheduleScheduleTimetable2MonthsOct UpdateScheduleScheduleTimetable2Months = "OCT"
	UpdateScheduleScheduleTimetable2MonthsFeb UpdateScheduleScheduleTimetable2Months = "FEB"
	UpdateScheduleScheduleTimetable2MonthsApr UpdateScheduleScheduleTimetable2Months = "APR"
	UpdateScheduleScheduleTimetable2MonthsSep UpdateScheduleScheduleTimetable2Months = "SEP"
	UpdateScheduleScheduleTimetable2MonthsAug UpdateScheduleScheduleTimetable2Months = "AUG"
	UpdateScheduleScheduleTimetable2MonthsJan UpdateScheduleScheduleTimetable2Months = "JAN"
	UpdateScheduleScheduleTimetable2MonthsJul UpdateScheduleScheduleTimetable2Months = "JUL"
)

func (e UpdateScheduleScheduleTimetable2Months) ToPointer() *UpdateScheduleScheduleTimetable2Months {
	return &e
}

func (e *UpdateScheduleScheduleTimetable2Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = UpdateScheduleScheduleTimetable2Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleScheduleTimetable2Months: %v", v)
	}
}

// UpdateScheduleScheduleTimetable2 - Timetable that specifies when a schedule triggers.
type UpdateScheduleScheduleTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []UpdateScheduleScheduleTimetable2DaysOfWeek `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []UpdateScheduleScheduleTimetable2Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// UpdateScheduleScheduleTimetable1DaysOfWeek - Day in a week, in three letters format
type UpdateScheduleScheduleTimetable1DaysOfWeek string

const (
	UpdateScheduleScheduleTimetable1DaysOfWeekTue UpdateScheduleScheduleTimetable1DaysOfWeek = "TUE"
	UpdateScheduleScheduleTimetable1DaysOfWeekSat UpdateScheduleScheduleTimetable1DaysOfWeek = "SAT"
	UpdateScheduleScheduleTimetable1DaysOfWeekSun UpdateScheduleScheduleTimetable1DaysOfWeek = "SUN"
	UpdateScheduleScheduleTimetable1DaysOfWeekMon UpdateScheduleScheduleTimetable1DaysOfWeek = "MON"
	UpdateScheduleScheduleTimetable1DaysOfWeekThu UpdateScheduleScheduleTimetable1DaysOfWeek = "THU"
	UpdateScheduleScheduleTimetable1DaysOfWeekWed UpdateScheduleScheduleTimetable1DaysOfWeek = "WED"
	UpdateScheduleScheduleTimetable1DaysOfWeekFri UpdateScheduleScheduleTimetable1DaysOfWeek = "FRI"
)

func (e UpdateScheduleScheduleTimetable1DaysOfWeek) ToPointer() *UpdateScheduleScheduleTimetable1DaysOfWeek {
	return &e
}

func (e *UpdateScheduleScheduleTimetable1DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = UpdateScheduleScheduleTimetable1DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleScheduleTimetable1DaysOfWeek: %v", v)
	}
}

// UpdateScheduleScheduleTimetable1Months - Month, in three letters format.
type UpdateScheduleScheduleTimetable1Months string

const (
	UpdateScheduleScheduleTimetable1MonthsMar UpdateScheduleScheduleTimetable1Months = "MAR"
	UpdateScheduleScheduleTimetable1MonthsNov UpdateScheduleScheduleTimetable1Months = "NOV"
	UpdateScheduleScheduleTimetable1MonthsDec UpdateScheduleScheduleTimetable1Months = "DEC"
	UpdateScheduleScheduleTimetable1MonthsJun UpdateScheduleScheduleTimetable1Months = "JUN"
	UpdateScheduleScheduleTimetable1MonthsMay UpdateScheduleScheduleTimetable1Months = "MAY"
	UpdateScheduleScheduleTimetable1MonthsOct UpdateScheduleScheduleTimetable1Months = "OCT"
	UpdateScheduleScheduleTimetable1MonthsFeb UpdateScheduleScheduleTimetable1Months = "FEB"
	UpdateScheduleScheduleTimetable1MonthsApr UpdateScheduleScheduleTimetable1Months = "APR"
	UpdateScheduleScheduleTimetable1MonthsSep UpdateScheduleScheduleTimetable1Months = "SEP"
	UpdateScheduleScheduleTimetable1MonthsAug UpdateScheduleScheduleTimetable1Months = "AUG"
	UpdateScheduleScheduleTimetable1MonthsJan UpdateScheduleScheduleTimetable1Months = "JAN"
	UpdateScheduleScheduleTimetable1MonthsJul UpdateScheduleScheduleTimetable1Months = "JUL"
)

func (e UpdateScheduleScheduleTimetable1Months) ToPointer() *UpdateScheduleScheduleTimetable1Months {
	return &e
}

func (e *UpdateScheduleScheduleTimetable1Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = UpdateScheduleScheduleTimetable1Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleScheduleTimetable1Months: %v", v)
	}
}

// UpdateScheduleScheduleTimetable1 - Timetable that specifies when a schedule triggers.
type UpdateScheduleScheduleTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []UpdateScheduleScheduleTimetable1DaysOfWeek `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []UpdateScheduleScheduleTimetable1Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// UpdateScheduleSchedule - A schedule response
type UpdateScheduleSchedule struct {
	// The attribution actor who will run the scheduled pipeline.
	Actor UpdateScheduleScheduleUser `json:"actor"`
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created-at"`
	// Description of the schedule.
	Description string `json:"description"`
	// The unique ID of the schedule.
	ID string `json:"id"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// The project-slug for the schedule
	ProjectSlug string `json:"project-slug"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
	// The date and time the pipeline was last updated.
	UpdatedAt time.Time `json:"updated-at"`
}

type UpdateScheduleResponse struct {
	ContentType string
	// A schedule object.
	Schedule    *UpdateScheduleSchedule
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	UpdateScheduleDefaultApplicationJSONObject *UpdateScheduleDefaultApplicationJSON
}
