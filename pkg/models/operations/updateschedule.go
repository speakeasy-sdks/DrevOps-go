// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// UpdateScheduleUpdateScheduleParametersAttributionActorEnum - The attribution-actor of the scheduled pipeline.
type UpdateScheduleUpdateScheduleParametersAttributionActorEnum string

const (
	UpdateScheduleUpdateScheduleParametersAttributionActorEnumCurrent UpdateScheduleUpdateScheduleParametersAttributionActorEnum = "current"
	UpdateScheduleUpdateScheduleParametersAttributionActorEnumSystem  UpdateScheduleUpdateScheduleParametersAttributionActorEnum = "system"
)

func (e UpdateScheduleUpdateScheduleParametersAttributionActorEnum) ToPointer() *UpdateScheduleUpdateScheduleParametersAttributionActorEnum {
	return &e
}

func (e *UpdateScheduleUpdateScheduleParametersAttributionActorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "current":
		fallthrough
	case "system":
		*e = UpdateScheduleUpdateScheduleParametersAttributionActorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleUpdateScheduleParametersAttributionActorEnum: %v", v)
	}
}

// UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum - Day in a week, in three letters format
type UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum string

const (
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnumTue UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum = "TUE"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnumSat UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum = "SAT"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnumSun UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum = "SUN"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnumMon UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum = "MON"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnumThu UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum = "THU"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnumWed UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum = "WED"
	UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnumFri UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum = "FRI"
)

func (e UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum) ToPointer() *UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum {
	return &e
}

func (e *UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum: %v", v)
	}
}

// UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum - Month, in three letters format.
type UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum string

const (
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumMar UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "MAR"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumNov UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "NOV"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumDec UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "DEC"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumJun UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "JUN"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumMay UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "MAY"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumOct UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "OCT"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumFeb UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "FEB"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumApr UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "APR"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumSep UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "SEP"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumAug UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "AUG"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumJan UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "JAN"
	UpdateScheduleUpdateScheduleParametersTimetableMonthsEnumJul UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum = "JUL"
)

func (e UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum) ToPointer() *UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum {
	return &e
}

func (e *UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum: %v", v)
	}
}

// UpdateScheduleUpdateScheduleParametersTimetable - Timetable that specifies when a schedule triggers.
type UpdateScheduleUpdateScheduleParametersTimetable struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []UpdateScheduleUpdateScheduleParametersTimetableDaysOfWeekEnum `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day,omitempty"`
	// Months in which the schedule triggers.
	Months []UpdateScheduleUpdateScheduleParametersTimetableMonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour *int64 `json:"per-hour,omitempty"`
}

// UpdateScheduleUpdateScheduleParameters - The parameters for an update schedule request
type UpdateScheduleUpdateScheduleParameters struct {
	// The attribution-actor of the scheduled pipeline.
	AttributionActor *UpdateScheduleUpdateScheduleParametersAttributionActorEnum `json:"attribution-actor,omitempty"`
	// Description of the schedule.
	Description *string `json:"description,omitempty"`
	// Name of the schedule.
	Name *string `json:"name,omitempty"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// Timetable that specifies when a schedule triggers.
	Timetable *UpdateScheduleUpdateScheduleParametersTimetable `json:"timetable,omitempty"`
}

type UpdateScheduleRequest struct {
	RequestBody *UpdateScheduleUpdateScheduleParameters `request:"mediaType=application/json"`
	// The unique ID of the schedule.
	ScheduleID string `pathParam:"style=simple,explode=false,name=schedule-id"`
}

// UpdateScheduleDefaultApplicationJSON - Error response.
type UpdateScheduleDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// UpdateScheduleScheduleUser - The attribution actor who will run the scheduled pipeline.
type UpdateScheduleScheduleUser struct {
	// The unique ID of the user.
	ID string `json:"id"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
	// The name of the user.
	Name string `json:"name"`
}

// UpdateScheduleScheduleTimetable2DaysOfWeekEnum - Day in a week, in three letters format
type UpdateScheduleScheduleTimetable2DaysOfWeekEnum string

const (
	UpdateScheduleScheduleTimetable2DaysOfWeekEnumTue UpdateScheduleScheduleTimetable2DaysOfWeekEnum = "TUE"
	UpdateScheduleScheduleTimetable2DaysOfWeekEnumSat UpdateScheduleScheduleTimetable2DaysOfWeekEnum = "SAT"
	UpdateScheduleScheduleTimetable2DaysOfWeekEnumSun UpdateScheduleScheduleTimetable2DaysOfWeekEnum = "SUN"
	UpdateScheduleScheduleTimetable2DaysOfWeekEnumMon UpdateScheduleScheduleTimetable2DaysOfWeekEnum = "MON"
	UpdateScheduleScheduleTimetable2DaysOfWeekEnumThu UpdateScheduleScheduleTimetable2DaysOfWeekEnum = "THU"
	UpdateScheduleScheduleTimetable2DaysOfWeekEnumWed UpdateScheduleScheduleTimetable2DaysOfWeekEnum = "WED"
	UpdateScheduleScheduleTimetable2DaysOfWeekEnumFri UpdateScheduleScheduleTimetable2DaysOfWeekEnum = "FRI"
)

func (e UpdateScheduleScheduleTimetable2DaysOfWeekEnum) ToPointer() *UpdateScheduleScheduleTimetable2DaysOfWeekEnum {
	return &e
}

func (e *UpdateScheduleScheduleTimetable2DaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = UpdateScheduleScheduleTimetable2DaysOfWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleScheduleTimetable2DaysOfWeekEnum: %v", v)
	}
}

// UpdateScheduleScheduleTimetable2MonthsEnum - Month, in three letters format.
type UpdateScheduleScheduleTimetable2MonthsEnum string

const (
	UpdateScheduleScheduleTimetable2MonthsEnumMar UpdateScheduleScheduleTimetable2MonthsEnum = "MAR"
	UpdateScheduleScheduleTimetable2MonthsEnumNov UpdateScheduleScheduleTimetable2MonthsEnum = "NOV"
	UpdateScheduleScheduleTimetable2MonthsEnumDec UpdateScheduleScheduleTimetable2MonthsEnum = "DEC"
	UpdateScheduleScheduleTimetable2MonthsEnumJun UpdateScheduleScheduleTimetable2MonthsEnum = "JUN"
	UpdateScheduleScheduleTimetable2MonthsEnumMay UpdateScheduleScheduleTimetable2MonthsEnum = "MAY"
	UpdateScheduleScheduleTimetable2MonthsEnumOct UpdateScheduleScheduleTimetable2MonthsEnum = "OCT"
	UpdateScheduleScheduleTimetable2MonthsEnumFeb UpdateScheduleScheduleTimetable2MonthsEnum = "FEB"
	UpdateScheduleScheduleTimetable2MonthsEnumApr UpdateScheduleScheduleTimetable2MonthsEnum = "APR"
	UpdateScheduleScheduleTimetable2MonthsEnumSep UpdateScheduleScheduleTimetable2MonthsEnum = "SEP"
	UpdateScheduleScheduleTimetable2MonthsEnumAug UpdateScheduleScheduleTimetable2MonthsEnum = "AUG"
	UpdateScheduleScheduleTimetable2MonthsEnumJan UpdateScheduleScheduleTimetable2MonthsEnum = "JAN"
	UpdateScheduleScheduleTimetable2MonthsEnumJul UpdateScheduleScheduleTimetable2MonthsEnum = "JUL"
)

func (e UpdateScheduleScheduleTimetable2MonthsEnum) ToPointer() *UpdateScheduleScheduleTimetable2MonthsEnum {
	return &e
}

func (e *UpdateScheduleScheduleTimetable2MonthsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = UpdateScheduleScheduleTimetable2MonthsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleScheduleTimetable2MonthsEnum: %v", v)
	}
}

// UpdateScheduleScheduleTimetable2 - Timetable that specifies when a schedule triggers.
type UpdateScheduleScheduleTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []UpdateScheduleScheduleTimetable2DaysOfWeekEnum `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []UpdateScheduleScheduleTimetable2MonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// UpdateScheduleScheduleTimetable1DaysOfWeekEnum - Day in a week, in three letters format
type UpdateScheduleScheduleTimetable1DaysOfWeekEnum string

const (
	UpdateScheduleScheduleTimetable1DaysOfWeekEnumTue UpdateScheduleScheduleTimetable1DaysOfWeekEnum = "TUE"
	UpdateScheduleScheduleTimetable1DaysOfWeekEnumSat UpdateScheduleScheduleTimetable1DaysOfWeekEnum = "SAT"
	UpdateScheduleScheduleTimetable1DaysOfWeekEnumSun UpdateScheduleScheduleTimetable1DaysOfWeekEnum = "SUN"
	UpdateScheduleScheduleTimetable1DaysOfWeekEnumMon UpdateScheduleScheduleTimetable1DaysOfWeekEnum = "MON"
	UpdateScheduleScheduleTimetable1DaysOfWeekEnumThu UpdateScheduleScheduleTimetable1DaysOfWeekEnum = "THU"
	UpdateScheduleScheduleTimetable1DaysOfWeekEnumWed UpdateScheduleScheduleTimetable1DaysOfWeekEnum = "WED"
	UpdateScheduleScheduleTimetable1DaysOfWeekEnumFri UpdateScheduleScheduleTimetable1DaysOfWeekEnum = "FRI"
)

func (e UpdateScheduleScheduleTimetable1DaysOfWeekEnum) ToPointer() *UpdateScheduleScheduleTimetable1DaysOfWeekEnum {
	return &e
}

func (e *UpdateScheduleScheduleTimetable1DaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = UpdateScheduleScheduleTimetable1DaysOfWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleScheduleTimetable1DaysOfWeekEnum: %v", v)
	}
}

// UpdateScheduleScheduleTimetable1MonthsEnum - Month, in three letters format.
type UpdateScheduleScheduleTimetable1MonthsEnum string

const (
	UpdateScheduleScheduleTimetable1MonthsEnumMar UpdateScheduleScheduleTimetable1MonthsEnum = "MAR"
	UpdateScheduleScheduleTimetable1MonthsEnumNov UpdateScheduleScheduleTimetable1MonthsEnum = "NOV"
	UpdateScheduleScheduleTimetable1MonthsEnumDec UpdateScheduleScheduleTimetable1MonthsEnum = "DEC"
	UpdateScheduleScheduleTimetable1MonthsEnumJun UpdateScheduleScheduleTimetable1MonthsEnum = "JUN"
	UpdateScheduleScheduleTimetable1MonthsEnumMay UpdateScheduleScheduleTimetable1MonthsEnum = "MAY"
	UpdateScheduleScheduleTimetable1MonthsEnumOct UpdateScheduleScheduleTimetable1MonthsEnum = "OCT"
	UpdateScheduleScheduleTimetable1MonthsEnumFeb UpdateScheduleScheduleTimetable1MonthsEnum = "FEB"
	UpdateScheduleScheduleTimetable1MonthsEnumApr UpdateScheduleScheduleTimetable1MonthsEnum = "APR"
	UpdateScheduleScheduleTimetable1MonthsEnumSep UpdateScheduleScheduleTimetable1MonthsEnum = "SEP"
	UpdateScheduleScheduleTimetable1MonthsEnumAug UpdateScheduleScheduleTimetable1MonthsEnum = "AUG"
	UpdateScheduleScheduleTimetable1MonthsEnumJan UpdateScheduleScheduleTimetable1MonthsEnum = "JAN"
	UpdateScheduleScheduleTimetable1MonthsEnumJul UpdateScheduleScheduleTimetable1MonthsEnum = "JUL"
)

func (e UpdateScheduleScheduleTimetable1MonthsEnum) ToPointer() *UpdateScheduleScheduleTimetable1MonthsEnum {
	return &e
}

func (e *UpdateScheduleScheduleTimetable1MonthsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = UpdateScheduleScheduleTimetable1MonthsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateScheduleScheduleTimetable1MonthsEnum: %v", v)
	}
}

// UpdateScheduleScheduleTimetable1 - Timetable that specifies when a schedule triggers.
type UpdateScheduleScheduleTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []UpdateScheduleScheduleTimetable1DaysOfWeekEnum `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []UpdateScheduleScheduleTimetable1MonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// UpdateScheduleSchedule - A schedule response
type UpdateScheduleSchedule struct {
	// The attribution actor who will run the scheduled pipeline.
	Actor UpdateScheduleScheduleUser `json:"actor"`
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created-at"`
	// Description of the schedule.
	Description string `json:"description"`
	// The unique ID of the schedule.
	ID string `json:"id"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// The project-slug for the schedule
	ProjectSlug string `json:"project-slug"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
	// The date and time the pipeline was last updated.
	UpdatedAt time.Time `json:"updated-at"`
}

type UpdateScheduleResponse struct {
	ContentType string
	// A schedule object.
	Schedule    *UpdateScheduleSchedule
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	UpdateScheduleDefaultApplicationJSONObject *UpdateScheduleDefaultApplicationJSON
}
