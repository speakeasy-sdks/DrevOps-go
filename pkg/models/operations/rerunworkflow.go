// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

// RerunWorkflowRerunWorkflowParameters - The information you can supply when rerunning a workflow.
type RerunWorkflowRerunWorkflowParameters struct {
	// Whether to enable SSH access for the triggering user on the newly-rerun job. Requires the jobs parameter to be used and so is mutually exclusive with the from_failed parameter.
	EnableSSH *bool `json:"enable_ssh,omitempty"`
	// Whether to rerun the workflow from the failed job. Mutually exclusive with the jobs parameter.
	FromFailed *bool `json:"from_failed,omitempty"`
	// A list of job IDs to rerun.
	Jobs []string `json:"jobs,omitempty"`
	// Completes rerun using sparse trees logic, an optimization for workflows that have disconnected subgraphs. Requires jobs parameter and so is mutually exclusive with the from_failed parameter.
	SparseTree *bool `json:"sparse_tree,omitempty"`
}

type RerunWorkflowRequest struct {
	RequestBody *RerunWorkflowRerunWorkflowParameters `request:"mediaType=application/json"`
	// The unique ID of the workflow.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// RerunWorkflowDefaultApplicationJSON - Error response.
type RerunWorkflowDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// RerunWorkflow202ApplicationJSON - A response to rerunning a workflow
type RerunWorkflow202ApplicationJSON struct {
	// The ID of the newly-created workflow.
	WorkflowID string `json:"workflow_id"`
}

type RerunWorkflowResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A confirmation message.
	RerunWorkflow202ApplicationJSONObject *RerunWorkflow202ApplicationJSON
	// Error response.
	RerunWorkflowDefaultApplicationJSONObject *RerunWorkflowDefaultApplicationJSON
}
