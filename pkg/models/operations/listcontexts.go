// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// ListContextsOwnerTypeEnum - The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
type ListContextsOwnerTypeEnum string

const (
	ListContextsOwnerTypeEnumAccount      ListContextsOwnerTypeEnum = "account"
	ListContextsOwnerTypeEnumOrganization ListContextsOwnerTypeEnum = "organization"
)

func (e ListContextsOwnerTypeEnum) ToPointer() *ListContextsOwnerTypeEnum {
	return &e
}

func (e *ListContextsOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "account":
		fallthrough
	case "organization":
		*e = ListContextsOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContextsOwnerTypeEnum: %s", s)
	}
}

type ListContextsRequest struct {
	// The unique ID of the owner of the context. Specify either this or owner-slug.
	OwnerID *string `queryParam:"style=form,explode=true,name=owner-id"`
	// A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.
	OwnerSlug *string `queryParam:"style=form,explode=true,name=owner-slug"`
	// The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
	OwnerType *ListContextsOwnerTypeEnum `queryParam:"style=form,explode=true,name=owner-type"`
	// A token to retrieve the next page of results.
	PageToken *string `queryParam:"style=form,explode=true,name=page-token"`
}

// ListContextsDefaultApplicationJSON - Error response.
type ListContextsDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

type ListContexts200ApplicationJSONContext struct {
	// The date and time the context was created.
	CreatedAt time.Time `json:"created_at"`
	// The unique ID of the context.
	ID string `json:"id"`
	// The user defined name of the context.
	Name string `json:"name"`
}

// ListContexts200ApplicationJSON - A paginated list of contexts
type ListContexts200ApplicationJSON struct {
	Items []ListContexts200ApplicationJSONContext `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type ListContextsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A paginated list of contexts
	ListContexts200ApplicationJSONObject *ListContexts200ApplicationJSON
	// Error response.
	ListContextsDefaultApplicationJSONObject *ListContextsDefaultApplicationJSON
}
