// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GetWebhooksScopeTypeEnum - Type of the scope being used
type GetWebhooksScopeTypeEnum string

const (
	GetWebhooksScopeTypeEnumProject GetWebhooksScopeTypeEnum = "project"
)

func (e GetWebhooksScopeTypeEnum) ToPointer() *GetWebhooksScopeTypeEnum {
	return &e
}

func (e *GetWebhooksScopeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "project":
		*e = GetWebhooksScopeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooksScopeTypeEnum: %v", v)
	}
}

type GetWebhooksRequest struct {
	// ID of the scope being used (at the moment, only project ID is supported)
	ScopeID string `queryParam:"style=form,explode=true,name=scope-id"`
	// Type of the scope being used
	ScopeType GetWebhooksScopeTypeEnum `queryParam:"style=form,explode=true,name=scope-type"`
}

// GetWebhooksDefaultApplicationJSON - Error response.
type GetWebhooksDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

type GetWebhooks200ApplicationJSONWebhookEventsEnum string

const (
	GetWebhooks200ApplicationJSONWebhookEventsEnumWorkflowCompleted GetWebhooks200ApplicationJSONWebhookEventsEnum = "workflow-completed"
	GetWebhooks200ApplicationJSONWebhookEventsEnumJobCompleted      GetWebhooks200ApplicationJSONWebhookEventsEnum = "job-completed"
)

func (e GetWebhooks200ApplicationJSONWebhookEventsEnum) ToPointer() *GetWebhooks200ApplicationJSONWebhookEventsEnum {
	return &e
}

func (e *GetWebhooks200ApplicationJSONWebhookEventsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "workflow-completed":
		fallthrough
	case "job-completed":
		*e = GetWebhooks200ApplicationJSONWebhookEventsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooks200ApplicationJSONWebhookEventsEnum: %v", v)
	}
}

// GetWebhooks200ApplicationJSONWebhookScope - The scope in which the relevant events that will trigger webhooks
type GetWebhooks200ApplicationJSONWebhookScope struct {
	// ID of the scope being used (at the moment, only project ID is supported)
	ID string `json:"id"`
	// Type of the scope being used
	Type string `json:"type"`
}

type GetWebhooks200ApplicationJSONWebhook struct {
	// The date and time the webhook was created.
	CreatedAt time.Time `json:"created-at"`
	// Events that will trigger the webhook
	Events []GetWebhooks200ApplicationJSONWebhookEventsEnum `json:"events"`
	// The unique ID of the webhook
	ID string `json:"id"`
	// Name of the webhook
	Name string `json:"name"`
	// The scope in which the relevant events that will trigger webhooks
	Scope GetWebhooks200ApplicationJSONWebhookScope `json:"scope"`
	// Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request
	SigningSecret string `json:"signing-secret"`
	// The date and time the webhook was last updated.
	UpdatedAt time.Time `json:"updated-at"`
	// URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
	URL string `json:"url"`
	// Whether to enforce TLS certificate verification when delivering the webhook
	VerifyTLS bool `json:"verify-tls"`
}

// GetWebhooks200ApplicationJSON - A list of webhooks
type GetWebhooks200ApplicationJSON struct {
	Items []GetWebhooks200ApplicationJSONWebhook `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type GetWebhooksResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of webhooks
	GetWebhooks200ApplicationJSONObject *GetWebhooks200ApplicationJSON
	// Error response.
	GetWebhooksDefaultApplicationJSONObject *GetWebhooksDefaultApplicationJSON
}
