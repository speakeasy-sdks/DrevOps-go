// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetProjectBySlugRequest struct {
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
}

// GetProjectBySlugDefaultApplicationJSON - Error response.
type GetProjectBySlugDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// GetProjectBySlugProjectVcsInfoProvider - The VCS provider
type GetProjectBySlugProjectVcsInfoProvider string

const (
	GetProjectBySlugProjectVcsInfoProviderBitbucket GetProjectBySlugProjectVcsInfoProvider = "Bitbucket"
	GetProjectBySlugProjectVcsInfoProviderCircleCi  GetProjectBySlugProjectVcsInfoProvider = "CircleCI"
	GetProjectBySlugProjectVcsInfoProviderGitHub    GetProjectBySlugProjectVcsInfoProvider = "GitHub"
)

func (e GetProjectBySlugProjectVcsInfoProvider) ToPointer() *GetProjectBySlugProjectVcsInfoProvider {
	return &e
}

func (e *GetProjectBySlugProjectVcsInfoProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bitbucket":
		fallthrough
	case "CircleCI":
		fallthrough
	case "GitHub":
		*e = GetProjectBySlugProjectVcsInfoProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectBySlugProjectVcsInfoProvider: %v", v)
	}
}

// GetProjectBySlugProjectVcsInfo - Information about the VCS that hosts the project source code.
type GetProjectBySlugProjectVcsInfo struct {
	DefaultBranch string `json:"default_branch"`
	// The VCS provider
	Provider GetProjectBySlugProjectVcsInfoProvider `json:"provider"`
	// URL to the repository hosting the project's code
	VcsURL string `json:"vcs_url"`
}

// GetProjectBySlugProject - NOTE: The definition of Project is subject to change.
type GetProjectBySlugProject struct {
	ID string `json:"id"`
	// The name of the project
	Name string `json:"name"`
	// The id of the organization the project belongs to
	OrganizationID string `json:"organization_id"`
	// The name of the organization the project belongs to
	OrganizationName string `json:"organization_name"`
	// The slug of the organization the project belongs to
	OrganizationSlug string `json:"organization_slug"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	Slug string `json:"slug"`
	// Information about the VCS that hosts the project source code.
	VcsInfo GetProjectBySlugProjectVcsInfo `json:"vcs_info"`
}

type GetProjectBySlugResponse struct {
	ContentType string
	// A project object
	Project     *GetProjectBySlugProject
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	GetProjectBySlugDefaultApplicationJSONObject *GetProjectBySlugDefaultApplicationJSON
}
