// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GetJobTimeseriesGranularity - The granularity for which to query timeseries data.
type GetJobTimeseriesGranularity string

const (
	GetJobTimeseriesGranularityDaily  GetJobTimeseriesGranularity = "daily"
	GetJobTimeseriesGranularityHourly GetJobTimeseriesGranularity = "hourly"
)

func (e GetJobTimeseriesGranularity) ToPointer() *GetJobTimeseriesGranularity {
	return &e
}

func (e *GetJobTimeseriesGranularity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "hourly":
		*e = GetJobTimeseriesGranularity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetJobTimeseriesGranularity: %v", v)
	}
}

type GetJobTimeseriesRequest struct {
	// The name of a vcs branch. If not passed we will scope the API call to the default branch.
	Branch *string `queryParam:"style=form,explode=true,name=branch"`
	// Include only executions that started before this date. This date can be at most 90 days after the start-date.
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end-date"`
	// The granularity for which to query timeseries data.
	Granularity *GetJobTimeseriesGranularity `queryParam:"style=form,explode=true,name=granularity"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
	// Include only executions that started at or after this date. This must be specified if an end-date is provided.
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start-date"`
	// The name of the workflow.
	WorkflowName string `pathParam:"style=simple,explode=false,name=workflow-name"`
}

// GetJobTimeseriesDefaultApplicationJSON - Error response.
type GetJobTimeseriesDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// GetJobTimeseries200ApplicationJSONItemsMetricsDurationMetrics - Metrics relating to the duration of runs for a workflow.
type GetJobTimeseries200ApplicationJSONItemsMetricsDurationMetrics struct {
	// The max duration, in seconds, among a group of runs.
	Max int64 `json:"max"`
	// The median duration, in seconds, among a group of runs.
	Median int64 `json:"median"`
	// The minimum duration, in seconds, among a group of runs.
	Min int64 `json:"min"`
	// The 95th percentile duration, in seconds, among a group of runs.
	P95 int64 `json:"p95"`
	// The total duration, in seconds, added across a group of runs.
	Total int64 `json:"total"`
}

// GetJobTimeseries200ApplicationJSONItemsMetrics - Metrics relating to a workflow's runs.
type GetJobTimeseries200ApplicationJSONItemsMetrics struct {
	// Metrics relating to the duration of runs for a workflow.
	DurationMetrics GetJobTimeseries200ApplicationJSONItemsMetricsDurationMetrics `json:"duration_metrics"`
	// The number of failed runs.
	FailedRuns int64 `json:"failed_runs"`
	// The median credits consumed over the current timeseries interval.
	MedianCreditsUsed int64 `json:"median_credits_used"`
	// The number of successful runs.
	SuccessfulRuns int64 `json:"successful_runs"`
	// The average number of runs per day.
	Throughput float32 `json:"throughput"`
	// The total credits consumed over the current timeseries interval.
	TotalCreditsUsed int64 `json:"total_credits_used"`
	// The total number of runs.
	TotalRuns int64 `json:"total_runs"`
}

type GetJobTimeseries200ApplicationJSONItems struct {
	// The end time of the last execution included in the metrics.
	MaxEndedAt time.Time `json:"max_ended_at"`
	// Metrics relating to a workflow's runs.
	Metrics GetJobTimeseries200ApplicationJSONItemsMetrics `json:"metrics"`
	// The start time for the earliest execution included in the metrics.
	MinStartedAt time.Time `json:"min_started_at"`
	// The name of the workflow.
	Name string `json:"name"`
	// The start of the interval for timeseries metrics.
	Timestamp time.Time `json:"timestamp"`
}

// GetJobTimeseries200ApplicationJSON - Project level timeseries metrics response
type GetJobTimeseries200ApplicationJSON struct {
	// Aggregate metrics for a workflow at a time granularity
	Items []GetJobTimeseries200ApplicationJSONItems `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type GetJobTimeseriesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An array of timeseries data, one entry per job.
	GetJobTimeseries200ApplicationJSONObject *GetJobTimeseries200ApplicationJSON
	// Error response.
	GetJobTimeseriesDefaultApplicationJSONObject *GetJobTimeseriesDefaultApplicationJSON
}
