// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"
)

// CreateContextRequestBodyOwner2TypeEnum - The type of owner. Defaults to "organization". Accounts are only used as context owners in server and must be specified by an id instead of a slug.
type CreateContextRequestBodyOwner2TypeEnum string

const (
	CreateContextRequestBodyOwner2TypeEnumOrganization CreateContextRequestBodyOwner2TypeEnum = "organization"
)

func (e CreateContextRequestBodyOwner2TypeEnum) ToPointer() *CreateContextRequestBodyOwner2TypeEnum {
	return &e
}

func (e *CreateContextRequestBodyOwner2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organization":
		*e = CreateContextRequestBodyOwner2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateContextRequestBodyOwner2TypeEnum: %v", v)
	}
}

type CreateContextRequestBodyOwner2 struct {
	// A string that represents an organization. Specify either this or id. Cannot be used for accounts.
	Slug string `json:"slug"`
	// The type of owner. Defaults to "organization". Accounts are only used as context owners in server and must be specified by an id instead of a slug.
	Type *CreateContextRequestBodyOwner2TypeEnum `json:"type,omitempty"`
}

// CreateContextRequestBodyOwner1TypeEnum - The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
type CreateContextRequestBodyOwner1TypeEnum string

const (
	CreateContextRequestBodyOwner1TypeEnumAccount      CreateContextRequestBodyOwner1TypeEnum = "account"
	CreateContextRequestBodyOwner1TypeEnumOrganization CreateContextRequestBodyOwner1TypeEnum = "organization"
)

func (e CreateContextRequestBodyOwner1TypeEnum) ToPointer() *CreateContextRequestBodyOwner1TypeEnum {
	return &e
}

func (e *CreateContextRequestBodyOwner1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		fallthrough
	case "organization":
		*e = CreateContextRequestBodyOwner1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateContextRequestBodyOwner1TypeEnum: %v", v)
	}
}

type CreateContextRequestBodyOwner1 struct {
	// The unique ID of the owner of the context. Specify either this or slug.
	ID string `json:"id"`
	// The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
	Type *CreateContextRequestBodyOwner1TypeEnum `json:"type,omitempty"`
}

type CreateContextRequestBodyOwnerType string

const (
	CreateContextRequestBodyOwnerTypeCreateContextRequestBodyOwner1 CreateContextRequestBodyOwnerType = "createContext_requestBody_owner_1"
	CreateContextRequestBodyOwnerTypeCreateContextRequestBodyOwner2 CreateContextRequestBodyOwnerType = "createContext_requestBody_owner_2"
)

type CreateContextRequestBodyOwner struct {
	CreateContextRequestBodyOwner1 *CreateContextRequestBodyOwner1
	CreateContextRequestBodyOwner2 *CreateContextRequestBodyOwner2

	Type CreateContextRequestBodyOwnerType
}

func CreateCreateContextRequestBodyOwnerCreateContextRequestBodyOwner1(createContextRequestBodyOwner1 CreateContextRequestBodyOwner1) CreateContextRequestBodyOwner {
	typ := CreateContextRequestBodyOwnerTypeCreateContextRequestBodyOwner1

	return CreateContextRequestBodyOwner{
		CreateContextRequestBodyOwner1: &createContextRequestBodyOwner1,
		Type:                           typ,
	}
}

func CreateCreateContextRequestBodyOwnerCreateContextRequestBodyOwner2(createContextRequestBodyOwner2 CreateContextRequestBodyOwner2) CreateContextRequestBodyOwner {
	typ := CreateContextRequestBodyOwnerTypeCreateContextRequestBodyOwner2

	return CreateContextRequestBodyOwner{
		CreateContextRequestBodyOwner2: &createContextRequestBodyOwner2,
		Type:                           typ,
	}
}

func (u *CreateContextRequestBodyOwner) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	createContextRequestBodyOwner1 := new(CreateContextRequestBodyOwner1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createContextRequestBodyOwner1); err == nil {
		u.CreateContextRequestBodyOwner1 = createContextRequestBodyOwner1
		u.Type = CreateContextRequestBodyOwnerTypeCreateContextRequestBodyOwner1
		return nil
	}

	createContextRequestBodyOwner2 := new(CreateContextRequestBodyOwner2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createContextRequestBodyOwner2); err == nil {
		u.CreateContextRequestBodyOwner2 = createContextRequestBodyOwner2
		u.Type = CreateContextRequestBodyOwnerTypeCreateContextRequestBodyOwner2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateContextRequestBodyOwner) MarshalJSON() ([]byte, error) {
	if u.CreateContextRequestBodyOwner1 != nil {
		return json.Marshal(u.CreateContextRequestBodyOwner1)
	}

	if u.CreateContextRequestBodyOwner2 != nil {
		return json.Marshal(u.CreateContextRequestBodyOwner2)
	}

	return nil, nil
}

type CreateContextRequestBody struct {
	// The user defined name of the context.
	Name  string                        `json:"name"`
	Owner CreateContextRequestBodyOwner `json:"owner"`
}

// CreateContextDefaultApplicationJSON - Error response.
type CreateContextDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// CreateContextContext - The new context
type CreateContextContext struct {
	// The date and time the context was created.
	CreatedAt time.Time `json:"created_at"`
	// The unique ID of the context.
	ID string `json:"id"`
	// The user defined name of the context.
	Name string `json:"name"`
}

type CreateContextResponse struct {
	ContentType string
	// The new context
	Context     *CreateContextContext
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	CreateContextDefaultApplicationJSONObject *CreateContextDefaultApplicationJSON
}
