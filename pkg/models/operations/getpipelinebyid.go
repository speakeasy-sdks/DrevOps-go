// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetPipelineByIDRequest struct {
	// The unique ID of the pipeline.
	PipelineID string `pathParam:"style=simple,explode=false,name=pipeline-id"`
}

// GetPipelineByIDDefaultApplicationJSON - Error response.
type GetPipelineByIDDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// GetPipelineByIDPipelineErrorsTypeEnum - The type of error.
type GetPipelineByIDPipelineErrorsTypeEnum string

const (
	GetPipelineByIDPipelineErrorsTypeEnumConfig      GetPipelineByIDPipelineErrorsTypeEnum = "config"
	GetPipelineByIDPipelineErrorsTypeEnumConfigFetch GetPipelineByIDPipelineErrorsTypeEnum = "config-fetch"
	GetPipelineByIDPipelineErrorsTypeEnumTimeout     GetPipelineByIDPipelineErrorsTypeEnum = "timeout"
	GetPipelineByIDPipelineErrorsTypeEnumPermission  GetPipelineByIDPipelineErrorsTypeEnum = "permission"
	GetPipelineByIDPipelineErrorsTypeEnumOther       GetPipelineByIDPipelineErrorsTypeEnum = "other"
	GetPipelineByIDPipelineErrorsTypeEnumPlan        GetPipelineByIDPipelineErrorsTypeEnum = "plan"
)

func (e GetPipelineByIDPipelineErrorsTypeEnum) ToPointer() *GetPipelineByIDPipelineErrorsTypeEnum {
	return &e
}

func (e *GetPipelineByIDPipelineErrorsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "config":
		fallthrough
	case "config-fetch":
		fallthrough
	case "timeout":
		fallthrough
	case "permission":
		fallthrough
	case "other":
		fallthrough
	case "plan":
		*e = GetPipelineByIDPipelineErrorsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPipelineByIDPipelineErrorsTypeEnum: %s", s)
	}
}

// GetPipelineByIDPipelineErrors - An error with a type and message.
type GetPipelineByIDPipelineErrors struct {
	// A human-readable error message.
	Message string `json:"message"`
	// The type of error.
	Type GetPipelineByIDPipelineErrorsTypeEnum `json:"type"`
}

// GetPipelineByIDPipelineStateEnum - The current state of the pipeline.
type GetPipelineByIDPipelineStateEnum string

const (
	GetPipelineByIDPipelineStateEnumCreated      GetPipelineByIDPipelineStateEnum = "created"
	GetPipelineByIDPipelineStateEnumErrored      GetPipelineByIDPipelineStateEnum = "errored"
	GetPipelineByIDPipelineStateEnumSetupPending GetPipelineByIDPipelineStateEnum = "setup-pending"
	GetPipelineByIDPipelineStateEnumSetup        GetPipelineByIDPipelineStateEnum = "setup"
	GetPipelineByIDPipelineStateEnumPending      GetPipelineByIDPipelineStateEnum = "pending"
)

func (e GetPipelineByIDPipelineStateEnum) ToPointer() *GetPipelineByIDPipelineStateEnum {
	return &e
}

func (e *GetPipelineByIDPipelineStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created":
		fallthrough
	case "errored":
		fallthrough
	case "setup-pending":
		fallthrough
	case "setup":
		fallthrough
	case "pending":
		*e = GetPipelineByIDPipelineStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPipelineByIDPipelineStateEnum: %s", s)
	}
}

// GetPipelineByIDPipelineTriggerActor - The user who triggered the Pipeline.
type GetPipelineByIDPipelineTriggerActor struct {
	// URL to the user's avatar on the VCS
	AvatarURL string `json:"avatar_url"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
}

// GetPipelineByIDPipelineTriggerTypeEnum - The type of trigger.
type GetPipelineByIDPipelineTriggerTypeEnum string

const (
	GetPipelineByIDPipelineTriggerTypeEnumScheduledPipeline GetPipelineByIDPipelineTriggerTypeEnum = "scheduled_pipeline"
	GetPipelineByIDPipelineTriggerTypeEnumExplicit          GetPipelineByIDPipelineTriggerTypeEnum = "explicit"
	GetPipelineByIDPipelineTriggerTypeEnumAPI               GetPipelineByIDPipelineTriggerTypeEnum = "api"
	GetPipelineByIDPipelineTriggerTypeEnumWebhook           GetPipelineByIDPipelineTriggerTypeEnum = "webhook"
)

func (e GetPipelineByIDPipelineTriggerTypeEnum) ToPointer() *GetPipelineByIDPipelineTriggerTypeEnum {
	return &e
}

func (e *GetPipelineByIDPipelineTriggerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "scheduled_pipeline":
		fallthrough
	case "explicit":
		fallthrough
	case "api":
		fallthrough
	case "webhook":
		*e = GetPipelineByIDPipelineTriggerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPipelineByIDPipelineTriggerTypeEnum: %s", s)
	}
}

// GetPipelineByIDPipelineTrigger - A summary of the trigger.
type GetPipelineByIDPipelineTrigger struct {
	// The user who triggered the Pipeline.
	Actor GetPipelineByIDPipelineTriggerActor `json:"actor"`
	// The date and time the trigger was received.
	ReceivedAt time.Time `json:"received_at"`
	// The type of trigger.
	Type GetPipelineByIDPipelineTriggerTypeEnum `json:"type"`
}

// GetPipelineByIDPipelineVcsCommit - The latest commit in the pipeline.
type GetPipelineByIDPipelineVcsCommit struct {
	// The body of the commit message.
	Body string `json:"body"`
	// The subject of the commit message.
	Subject string `json:"subject"`
}

// GetPipelineByIDPipelineVcs - VCS information for the pipeline.
type GetPipelineByIDPipelineVcs struct {
	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`
	// The latest commit in the pipeline.
	Commit *GetPipelineByIDPipelineVcsCommit `json:"commit,omitempty"`
	// URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
	OriginRepositoryURL string `json:"origin_repository_url"`
	// Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName string `json:"provider_name"`
	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`
	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`
	// The code revision the pipeline ran.
	Revision string `json:"revision"`
	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
	Tag *string `json:"tag,omitempty"`
	// URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
	TargetRepositoryURL string `json:"target_repository_url"`
}

// GetPipelineByIDPipeline - A pipeline response.
type GetPipelineByIDPipeline struct {
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created_at"`
	// A sequence of errors that have occurred within the pipeline.
	Errors []GetPipelineByIDPipelineErrors `json:"errors"`
	// The unique ID of the pipeline.
	ID string `json:"id"`
	// The number of the pipeline.
	Number int64 `json:"number"`
	// The project-slug for the pipeline.
	ProjectSlug string `json:"project_slug"`
	// The current state of the pipeline.
	State GetPipelineByIDPipelineStateEnum `json:"state"`
	// A summary of the trigger.
	Trigger           GetPipelineByIDPipelineTrigger `json:"trigger"`
	TriggerParameters map[string]interface{}         `json:"trigger_parameters,omitempty"`
	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// VCS information for the pipeline.
	Vcs *GetPipelineByIDPipelineVcs `json:"vcs,omitempty"`
}

type GetPipelineByIDResponse struct {
	ContentType string
	// A pipeline object.
	Pipeline    *GetPipelineByIDPipeline
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	GetPipelineByIDDefaultApplicationJSONObject *GetPipelineByIDDefaultApplicationJSON
}
