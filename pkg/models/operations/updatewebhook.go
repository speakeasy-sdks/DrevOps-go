// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type UpdateWebhookRequestBodyEventsEnum string

const (
	UpdateWebhookRequestBodyEventsEnumWorkflowCompleted UpdateWebhookRequestBodyEventsEnum = "workflow-completed"
	UpdateWebhookRequestBodyEventsEnumJobCompleted      UpdateWebhookRequestBodyEventsEnum = "job-completed"
)

func (e UpdateWebhookRequestBodyEventsEnum) ToPointer() *UpdateWebhookRequestBodyEventsEnum {
	return &e
}

func (e *UpdateWebhookRequestBodyEventsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "workflow-completed":
		fallthrough
	case "job-completed":
		*e = UpdateWebhookRequestBodyEventsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWebhookRequestBodyEventsEnum: %v", v)
	}
}

// UpdateWebhookRequestBody - The parameters for an update webhook request
type UpdateWebhookRequestBody struct {
	// Events that will trigger the webhook
	Events []UpdateWebhookRequestBodyEventsEnum `json:"events,omitempty"`
	// Name of the webhook
	Name *string `json:"name,omitempty"`
	// Secret used to build an HMAC hash of the payload and passed as a header in the webhook request
	SigningSecret *string `json:"signing-secret,omitempty"`
	// URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
	URL *string `json:"url,omitempty"`
	// Whether to enforce TLS certificate verification when delivering the webhook
	VerifyTLS *bool `json:"verify-tls,omitempty"`
}

type UpdateWebhookRequest struct {
	RequestBody *UpdateWebhookRequestBody `request:"mediaType=application/json"`
	// ID of the webhook (UUID)
	WebhookID string `pathParam:"style=simple,explode=false,name=webhook-id"`
}

// UpdateWebhookDefaultApplicationJSON - Error response.
type UpdateWebhookDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

type UpdateWebhookWebhookEventsEnum string

const (
	UpdateWebhookWebhookEventsEnumWorkflowCompleted UpdateWebhookWebhookEventsEnum = "workflow-completed"
	UpdateWebhookWebhookEventsEnumJobCompleted      UpdateWebhookWebhookEventsEnum = "job-completed"
)

func (e UpdateWebhookWebhookEventsEnum) ToPointer() *UpdateWebhookWebhookEventsEnum {
	return &e
}

func (e *UpdateWebhookWebhookEventsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "workflow-completed":
		fallthrough
	case "job-completed":
		*e = UpdateWebhookWebhookEventsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWebhookWebhookEventsEnum: %v", v)
	}
}

// UpdateWebhookWebhookScope - The scope in which the relevant events that will trigger webhooks
type UpdateWebhookWebhookScope struct {
	// ID of the scope being used (at the moment, only project ID is supported)
	ID string `json:"id"`
	// Type of the scope being used
	Type string `json:"type"`
}

// UpdateWebhookWebhook - A webhook
type UpdateWebhookWebhook struct {
	// The date and time the webhook was created.
	CreatedAt time.Time `json:"created-at"`
	// Events that will trigger the webhook
	Events []UpdateWebhookWebhookEventsEnum `json:"events"`
	// The unique ID of the webhook
	ID string `json:"id"`
	// Name of the webhook
	Name string `json:"name"`
	// The scope in which the relevant events that will trigger webhooks
	Scope UpdateWebhookWebhookScope `json:"scope"`
	// Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request
	SigningSecret string `json:"signing-secret"`
	// The date and time the webhook was last updated.
	UpdatedAt time.Time `json:"updated-at"`
	// URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
	URL string `json:"url"`
	// Whether to enforce TLS certificate verification when delivering the webhook
	VerifyTLS bool `json:"verify-tls"`
}

type UpdateWebhookResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A webhook
	Webhook *UpdateWebhookWebhook
	// Error response.
	UpdateWebhookDefaultApplicationJSONObject *UpdateWebhookDefaultApplicationJSON
}
