// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ListPipelinesRequest struct {
	// Only include entries created by your user.
	Mine *bool `queryParam:"style=form,explode=true,name=mine"`
	// Org slug in the form `vcs-slug/org-name`
	OrgSlug *string `queryParam:"style=form,explode=true,name=org-slug"`
	// A token to retrieve the next page of results.
	PageToken *string `queryParam:"style=form,explode=true,name=page-token"`
}

// ListPipelinesDefaultApplicationJSON - Error response.
type ListPipelinesDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// ListPipelinesPipelineListResponsePipelineErrorsType - The type of error.
type ListPipelinesPipelineListResponsePipelineErrorsType string

const (
	ListPipelinesPipelineListResponsePipelineErrorsTypeConfig      ListPipelinesPipelineListResponsePipelineErrorsType = "config"
	ListPipelinesPipelineListResponsePipelineErrorsTypeConfigFetch ListPipelinesPipelineListResponsePipelineErrorsType = "config-fetch"
	ListPipelinesPipelineListResponsePipelineErrorsTypeTimeout     ListPipelinesPipelineListResponsePipelineErrorsType = "timeout"
	ListPipelinesPipelineListResponsePipelineErrorsTypePermission  ListPipelinesPipelineListResponsePipelineErrorsType = "permission"
	ListPipelinesPipelineListResponsePipelineErrorsTypeOther       ListPipelinesPipelineListResponsePipelineErrorsType = "other"
	ListPipelinesPipelineListResponsePipelineErrorsTypePlan        ListPipelinesPipelineListResponsePipelineErrorsType = "plan"
)

func (e ListPipelinesPipelineListResponsePipelineErrorsType) ToPointer() *ListPipelinesPipelineListResponsePipelineErrorsType {
	return &e
}

func (e *ListPipelinesPipelineListResponsePipelineErrorsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "config":
		fallthrough
	case "config-fetch":
		fallthrough
	case "timeout":
		fallthrough
	case "permission":
		fallthrough
	case "other":
		fallthrough
	case "plan":
		*e = ListPipelinesPipelineListResponsePipelineErrorsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPipelinesPipelineListResponsePipelineErrorsType: %v", v)
	}
}

// ListPipelinesPipelineListResponsePipelineErrors - An error with a type and message.
type ListPipelinesPipelineListResponsePipelineErrors struct {
	// A human-readable error message.
	Message string `json:"message"`
	// The type of error.
	Type ListPipelinesPipelineListResponsePipelineErrorsType `json:"type"`
}

// ListPipelinesPipelineListResponsePipelineState - The current state of the pipeline.
type ListPipelinesPipelineListResponsePipelineState string

const (
	ListPipelinesPipelineListResponsePipelineStateCreated      ListPipelinesPipelineListResponsePipelineState = "created"
	ListPipelinesPipelineListResponsePipelineStateErrored      ListPipelinesPipelineListResponsePipelineState = "errored"
	ListPipelinesPipelineListResponsePipelineStateSetupPending ListPipelinesPipelineListResponsePipelineState = "setup-pending"
	ListPipelinesPipelineListResponsePipelineStateSetup        ListPipelinesPipelineListResponsePipelineState = "setup"
	ListPipelinesPipelineListResponsePipelineStatePending      ListPipelinesPipelineListResponsePipelineState = "pending"
)

func (e ListPipelinesPipelineListResponsePipelineState) ToPointer() *ListPipelinesPipelineListResponsePipelineState {
	return &e
}

func (e *ListPipelinesPipelineListResponsePipelineState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "errored":
		fallthrough
	case "setup-pending":
		fallthrough
	case "setup":
		fallthrough
	case "pending":
		*e = ListPipelinesPipelineListResponsePipelineState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPipelinesPipelineListResponsePipelineState: %v", v)
	}
}

// ListPipelinesPipelineListResponsePipelineTriggerActor - The user who triggered the Pipeline.
type ListPipelinesPipelineListResponsePipelineTriggerActor struct {
	// URL to the user's avatar on the VCS
	AvatarURL string `json:"avatar_url"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
}

// ListPipelinesPipelineListResponsePipelineTriggerType - The type of trigger.
type ListPipelinesPipelineListResponsePipelineTriggerType string

const (
	ListPipelinesPipelineListResponsePipelineTriggerTypeScheduledPipeline ListPipelinesPipelineListResponsePipelineTriggerType = "scheduled_pipeline"
	ListPipelinesPipelineListResponsePipelineTriggerTypeExplicit          ListPipelinesPipelineListResponsePipelineTriggerType = "explicit"
	ListPipelinesPipelineListResponsePipelineTriggerTypeAPI               ListPipelinesPipelineListResponsePipelineTriggerType = "api"
	ListPipelinesPipelineListResponsePipelineTriggerTypeWebhook           ListPipelinesPipelineListResponsePipelineTriggerType = "webhook"
)

func (e ListPipelinesPipelineListResponsePipelineTriggerType) ToPointer() *ListPipelinesPipelineListResponsePipelineTriggerType {
	return &e
}

func (e *ListPipelinesPipelineListResponsePipelineTriggerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scheduled_pipeline":
		fallthrough
	case "explicit":
		fallthrough
	case "api":
		fallthrough
	case "webhook":
		*e = ListPipelinesPipelineListResponsePipelineTriggerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPipelinesPipelineListResponsePipelineTriggerType: %v", v)
	}
}

// ListPipelinesPipelineListResponsePipelineTrigger - A summary of the trigger.
type ListPipelinesPipelineListResponsePipelineTrigger struct {
	// The user who triggered the Pipeline.
	Actor ListPipelinesPipelineListResponsePipelineTriggerActor `json:"actor"`
	// The date and time the trigger was received.
	ReceivedAt time.Time `json:"received_at"`
	// The type of trigger.
	Type ListPipelinesPipelineListResponsePipelineTriggerType `json:"type"`
}

// ListPipelinesPipelineListResponsePipelineVcsCommit - The latest commit in the pipeline.
type ListPipelinesPipelineListResponsePipelineVcsCommit struct {
	// The body of the commit message.
	Body string `json:"body"`
	// The subject of the commit message.
	Subject string `json:"subject"`
}

// ListPipelinesPipelineListResponsePipelineVcs - VCS information for the pipeline.
type ListPipelinesPipelineListResponsePipelineVcs struct {
	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`
	// The latest commit in the pipeline.
	Commit *ListPipelinesPipelineListResponsePipelineVcsCommit `json:"commit,omitempty"`
	// URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
	OriginRepositoryURL string `json:"origin_repository_url"`
	// Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName string `json:"provider_name"`
	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`
	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`
	// The code revision the pipeline ran.
	Revision string `json:"revision"`
	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
	Tag *string `json:"tag,omitempty"`
	// URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
	TargetRepositoryURL string `json:"target_repository_url"`
}

// ListPipelinesPipelineListResponsePipeline - A pipeline response.
type ListPipelinesPipelineListResponsePipeline struct {
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created_at"`
	// A sequence of errors that have occurred within the pipeline.
	Errors []ListPipelinesPipelineListResponsePipelineErrors `json:"errors"`
	// The unique ID of the pipeline.
	ID string `json:"id"`
	// The number of the pipeline.
	Number int64 `json:"number"`
	// The project-slug for the pipeline.
	ProjectSlug string `json:"project_slug"`
	// The current state of the pipeline.
	State ListPipelinesPipelineListResponsePipelineState `json:"state"`
	// A summary of the trigger.
	Trigger           ListPipelinesPipelineListResponsePipelineTrigger `json:"trigger"`
	TriggerParameters map[string]interface{}                           `json:"trigger_parameters,omitempty"`
	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// VCS information for the pipeline.
	Vcs *ListPipelinesPipelineListResponsePipelineVcs `json:"vcs,omitempty"`
}

// ListPipelinesPipelineListResponse - List of pipelines
type ListPipelinesPipelineListResponse struct {
	Items []ListPipelinesPipelineListResponsePipeline `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type ListPipelinesResponse struct {
	ContentType string
	// A sequence of pipelines.
	PipelineListResponse *ListPipelinesPipelineListResponse
	StatusCode           int
	RawResponse          *http.Response
	// Error response.
	ListPipelinesDefaultApplicationJSONObject *ListPipelinesDefaultApplicationJSON
}
