// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ListWorkflowsByPipelineIDRequest struct {
	// A token to retrieve the next page of results.
	PageToken *string `queryParam:"style=form,explode=true,name=page-token"`
	// The unique ID of the pipeline.
	PipelineID string `pathParam:"style=simple,explode=false,name=pipeline-id"`
}

// ListWorkflowsByPipelineIDDefaultApplicationJSON - Error response.
type ListWorkflowsByPipelineIDDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus - The current status of the workflow.
type ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus string

const (
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusSuccess      ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "success"
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusRunning      ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "running"
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusNotRun       ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "not_run"
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusFailed       ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "failed"
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusError        ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "error"
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusFailing      ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "failing"
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusOnHold       ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "on_hold"
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusCanceled     ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "canceled"
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatusUnauthorized ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus = "unauthorized"
)

func (e ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus) ToPointer() *ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus {
	return &e
}

func (e *ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "not_run":
		fallthrough
	case "failed":
		fallthrough
	case "error":
		fallthrough
	case "failing":
		fallthrough
	case "on_hold":
		fallthrough
	case "canceled":
		fallthrough
	case "unauthorized":
		*e = ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus: %v", v)
	}
}

// ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag - Tag used for the workflow
type ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag string

const (
	ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTagSetup ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag = "setup"
)

func (e ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag) ToPointer() *ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag {
	return &e
}

func (e *ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "setup":
		*e = ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag: %v", v)
	}
}

// ListWorkflowsByPipelineIDWorkflowListResponseWorkflow - A workflow
type ListWorkflowsByPipelineIDWorkflowListResponseWorkflow struct {
	CanceledBy *string `json:"canceled_by,omitempty"`
	// The date and time the workflow was created.
	CreatedAt time.Time `json:"created_at"`
	ErroredBy *string   `json:"errored_by,omitempty"`
	// The unique ID of the workflow.
	ID string `json:"id"`
	// The name of the workflow.
	Name string `json:"name"`
	// The ID of the pipeline this workflow belongs to.
	PipelineID string `json:"pipeline_id"`
	// The number of the pipeline this workflow belongs to.
	PipelineNumber int64 `json:"pipeline_number"`
	// The project-slug for the pipeline this workflow belongs to.
	ProjectSlug string `json:"project_slug"`
	StartedBy   string `json:"started_by"`
	// The current status of the workflow.
	Status ListWorkflowsByPipelineIDWorkflowListResponseWorkflowStatus `json:"status"`
	// The date and time the workflow stopped.
	StoppedAt time.Time `json:"stopped_at"`
	// Tag used for the workflow
	Tag *ListWorkflowsByPipelineIDWorkflowListResponseWorkflowTag `json:"tag,omitempty"`
}

// ListWorkflowsByPipelineIDWorkflowListResponse - A list of workflows and associated pagination token.
type ListWorkflowsByPipelineIDWorkflowListResponse struct {
	// A list of workflows.
	Items []ListWorkflowsByPipelineIDWorkflowListResponseWorkflow `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type ListWorkflowsByPipelineIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A paginated list of workflow objects.
	WorkflowListResponse *ListWorkflowsByPipelineIDWorkflowListResponse
	// Error response.
	ListWorkflowsByPipelineIDDefaultApplicationJSONObject *ListWorkflowsByPipelineIDDefaultApplicationJSON
}
