// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// CreateScheduleCreateScheduleParametersAttributionActor - The attribution-actor of the scheduled pipeline.
type CreateScheduleCreateScheduleParametersAttributionActor string

const (
	CreateScheduleCreateScheduleParametersAttributionActorCurrent CreateScheduleCreateScheduleParametersAttributionActor = "current"
	CreateScheduleCreateScheduleParametersAttributionActorSystem  CreateScheduleCreateScheduleParametersAttributionActor = "system"
)

func (e CreateScheduleCreateScheduleParametersAttributionActor) ToPointer() *CreateScheduleCreateScheduleParametersAttributionActor {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersAttributionActor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "current":
		fallthrough
	case "system":
		*e = CreateScheduleCreateScheduleParametersAttributionActor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersAttributionActor: %v", v)
	}
}

// CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek - Day in a week, in three letters format
type CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek string

const (
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekTue CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek = "TUE"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekSat CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek = "SAT"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekSun CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek = "SUN"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekMon CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek = "MON"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekThu CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek = "THU"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekWed CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek = "WED"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekFri CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek = "FRI"
)

func (e CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek) ToPointer() *CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek: %v", v)
	}
}

// CreateScheduleCreateScheduleParametersTimetable2Months - Month, in three letters format.
type CreateScheduleCreateScheduleParametersTimetable2Months string

const (
	CreateScheduleCreateScheduleParametersTimetable2MonthsMar CreateScheduleCreateScheduleParametersTimetable2Months = "MAR"
	CreateScheduleCreateScheduleParametersTimetable2MonthsNov CreateScheduleCreateScheduleParametersTimetable2Months = "NOV"
	CreateScheduleCreateScheduleParametersTimetable2MonthsDec CreateScheduleCreateScheduleParametersTimetable2Months = "DEC"
	CreateScheduleCreateScheduleParametersTimetable2MonthsJun CreateScheduleCreateScheduleParametersTimetable2Months = "JUN"
	CreateScheduleCreateScheduleParametersTimetable2MonthsMay CreateScheduleCreateScheduleParametersTimetable2Months = "MAY"
	CreateScheduleCreateScheduleParametersTimetable2MonthsOct CreateScheduleCreateScheduleParametersTimetable2Months = "OCT"
	CreateScheduleCreateScheduleParametersTimetable2MonthsFeb CreateScheduleCreateScheduleParametersTimetable2Months = "FEB"
	CreateScheduleCreateScheduleParametersTimetable2MonthsApr CreateScheduleCreateScheduleParametersTimetable2Months = "APR"
	CreateScheduleCreateScheduleParametersTimetable2MonthsSep CreateScheduleCreateScheduleParametersTimetable2Months = "SEP"
	CreateScheduleCreateScheduleParametersTimetable2MonthsAug CreateScheduleCreateScheduleParametersTimetable2Months = "AUG"
	CreateScheduleCreateScheduleParametersTimetable2MonthsJan CreateScheduleCreateScheduleParametersTimetable2Months = "JAN"
	CreateScheduleCreateScheduleParametersTimetable2MonthsJul CreateScheduleCreateScheduleParametersTimetable2Months = "JUL"
)

func (e CreateScheduleCreateScheduleParametersTimetable2Months) ToPointer() *CreateScheduleCreateScheduleParametersTimetable2Months {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersTimetable2Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = CreateScheduleCreateScheduleParametersTimetable2Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersTimetable2Months: %v", v)
	}
}

// CreateScheduleCreateScheduleParametersTimetable2 - Timetable that specifies when a schedule triggers.
type CreateScheduleCreateScheduleParametersTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []CreateScheduleCreateScheduleParametersTimetable2Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek - Day in a week, in three letters format
type CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek string

const (
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekTue CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek = "TUE"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekSat CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek = "SAT"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekSun CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek = "SUN"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekMon CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek = "MON"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekThu CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek = "THU"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekWed CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek = "WED"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekFri CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek = "FRI"
)

func (e CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek) ToPointer() *CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek: %v", v)
	}
}

// CreateScheduleCreateScheduleParametersTimetable1Months - Month, in three letters format.
type CreateScheduleCreateScheduleParametersTimetable1Months string

const (
	CreateScheduleCreateScheduleParametersTimetable1MonthsMar CreateScheduleCreateScheduleParametersTimetable1Months = "MAR"
	CreateScheduleCreateScheduleParametersTimetable1MonthsNov CreateScheduleCreateScheduleParametersTimetable1Months = "NOV"
	CreateScheduleCreateScheduleParametersTimetable1MonthsDec CreateScheduleCreateScheduleParametersTimetable1Months = "DEC"
	CreateScheduleCreateScheduleParametersTimetable1MonthsJun CreateScheduleCreateScheduleParametersTimetable1Months = "JUN"
	CreateScheduleCreateScheduleParametersTimetable1MonthsMay CreateScheduleCreateScheduleParametersTimetable1Months = "MAY"
	CreateScheduleCreateScheduleParametersTimetable1MonthsOct CreateScheduleCreateScheduleParametersTimetable1Months = "OCT"
	CreateScheduleCreateScheduleParametersTimetable1MonthsFeb CreateScheduleCreateScheduleParametersTimetable1Months = "FEB"
	CreateScheduleCreateScheduleParametersTimetable1MonthsApr CreateScheduleCreateScheduleParametersTimetable1Months = "APR"
	CreateScheduleCreateScheduleParametersTimetable1MonthsSep CreateScheduleCreateScheduleParametersTimetable1Months = "SEP"
	CreateScheduleCreateScheduleParametersTimetable1MonthsAug CreateScheduleCreateScheduleParametersTimetable1Months = "AUG"
	CreateScheduleCreateScheduleParametersTimetable1MonthsJan CreateScheduleCreateScheduleParametersTimetable1Months = "JAN"
	CreateScheduleCreateScheduleParametersTimetable1MonthsJul CreateScheduleCreateScheduleParametersTimetable1Months = "JUL"
)

func (e CreateScheduleCreateScheduleParametersTimetable1Months) ToPointer() *CreateScheduleCreateScheduleParametersTimetable1Months {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersTimetable1Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = CreateScheduleCreateScheduleParametersTimetable1Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersTimetable1Months: %v", v)
	}
}

// CreateScheduleCreateScheduleParametersTimetable1 - Timetable that specifies when a schedule triggers.
type CreateScheduleCreateScheduleParametersTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []CreateScheduleCreateScheduleParametersTimetable1Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// CreateScheduleCreateScheduleParameters - The parameters for a create schedule request
type CreateScheduleCreateScheduleParameters struct {
	// The attribution-actor of the scheduled pipeline.
	AttributionActor CreateScheduleCreateScheduleParametersAttributionActor `json:"attribution-actor"`
	// Description of the schedule.
	Description *string `json:"description,omitempty"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
}

type CreateScheduleRequest struct {
	RequestBody *CreateScheduleCreateScheduleParameters `request:"mediaType=application/json"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
}

// CreateScheduleDefaultApplicationJSON - Error response.
type CreateScheduleDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// CreateScheduleScheduleUser - The attribution actor who will run the scheduled pipeline.
type CreateScheduleScheduleUser struct {
	// The unique ID of the user.
	ID string `json:"id"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
	// The name of the user.
	Name string `json:"name"`
}

// CreateScheduleScheduleTimetable2DaysOfWeek - Day in a week, in three letters format
type CreateScheduleScheduleTimetable2DaysOfWeek string

const (
	CreateScheduleScheduleTimetable2DaysOfWeekTue CreateScheduleScheduleTimetable2DaysOfWeek = "TUE"
	CreateScheduleScheduleTimetable2DaysOfWeekSat CreateScheduleScheduleTimetable2DaysOfWeek = "SAT"
	CreateScheduleScheduleTimetable2DaysOfWeekSun CreateScheduleScheduleTimetable2DaysOfWeek = "SUN"
	CreateScheduleScheduleTimetable2DaysOfWeekMon CreateScheduleScheduleTimetable2DaysOfWeek = "MON"
	CreateScheduleScheduleTimetable2DaysOfWeekThu CreateScheduleScheduleTimetable2DaysOfWeek = "THU"
	CreateScheduleScheduleTimetable2DaysOfWeekWed CreateScheduleScheduleTimetable2DaysOfWeek = "WED"
	CreateScheduleScheduleTimetable2DaysOfWeekFri CreateScheduleScheduleTimetable2DaysOfWeek = "FRI"
)

func (e CreateScheduleScheduleTimetable2DaysOfWeek) ToPointer() *CreateScheduleScheduleTimetable2DaysOfWeek {
	return &e
}

func (e *CreateScheduleScheduleTimetable2DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = CreateScheduleScheduleTimetable2DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleScheduleTimetable2DaysOfWeek: %v", v)
	}
}

// CreateScheduleScheduleTimetable2Months - Month, in three letters format.
type CreateScheduleScheduleTimetable2Months string

const (
	CreateScheduleScheduleTimetable2MonthsMar CreateScheduleScheduleTimetable2Months = "MAR"
	CreateScheduleScheduleTimetable2MonthsNov CreateScheduleScheduleTimetable2Months = "NOV"
	CreateScheduleScheduleTimetable2MonthsDec CreateScheduleScheduleTimetable2Months = "DEC"
	CreateScheduleScheduleTimetable2MonthsJun CreateScheduleScheduleTimetable2Months = "JUN"
	CreateScheduleScheduleTimetable2MonthsMay CreateScheduleScheduleTimetable2Months = "MAY"
	CreateScheduleScheduleTimetable2MonthsOct CreateScheduleScheduleTimetable2Months = "OCT"
	CreateScheduleScheduleTimetable2MonthsFeb CreateScheduleScheduleTimetable2Months = "FEB"
	CreateScheduleScheduleTimetable2MonthsApr CreateScheduleScheduleTimetable2Months = "APR"
	CreateScheduleScheduleTimetable2MonthsSep CreateScheduleScheduleTimetable2Months = "SEP"
	CreateScheduleScheduleTimetable2MonthsAug CreateScheduleScheduleTimetable2Months = "AUG"
	CreateScheduleScheduleTimetable2MonthsJan CreateScheduleScheduleTimetable2Months = "JAN"
	CreateScheduleScheduleTimetable2MonthsJul CreateScheduleScheduleTimetable2Months = "JUL"
)

func (e CreateScheduleScheduleTimetable2Months) ToPointer() *CreateScheduleScheduleTimetable2Months {
	return &e
}

func (e *CreateScheduleScheduleTimetable2Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = CreateScheduleScheduleTimetable2Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleScheduleTimetable2Months: %v", v)
	}
}

// CreateScheduleScheduleTimetable2 - Timetable that specifies when a schedule triggers.
type CreateScheduleScheduleTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []CreateScheduleScheduleTimetable2DaysOfWeek `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []CreateScheduleScheduleTimetable2Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// CreateScheduleScheduleTimetable1DaysOfWeek - Day in a week, in three letters format
type CreateScheduleScheduleTimetable1DaysOfWeek string

const (
	CreateScheduleScheduleTimetable1DaysOfWeekTue CreateScheduleScheduleTimetable1DaysOfWeek = "TUE"
	CreateScheduleScheduleTimetable1DaysOfWeekSat CreateScheduleScheduleTimetable1DaysOfWeek = "SAT"
	CreateScheduleScheduleTimetable1DaysOfWeekSun CreateScheduleScheduleTimetable1DaysOfWeek = "SUN"
	CreateScheduleScheduleTimetable1DaysOfWeekMon CreateScheduleScheduleTimetable1DaysOfWeek = "MON"
	CreateScheduleScheduleTimetable1DaysOfWeekThu CreateScheduleScheduleTimetable1DaysOfWeek = "THU"
	CreateScheduleScheduleTimetable1DaysOfWeekWed CreateScheduleScheduleTimetable1DaysOfWeek = "WED"
	CreateScheduleScheduleTimetable1DaysOfWeekFri CreateScheduleScheduleTimetable1DaysOfWeek = "FRI"
)

func (e CreateScheduleScheduleTimetable1DaysOfWeek) ToPointer() *CreateScheduleScheduleTimetable1DaysOfWeek {
	return &e
}

func (e *CreateScheduleScheduleTimetable1DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = CreateScheduleScheduleTimetable1DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleScheduleTimetable1DaysOfWeek: %v", v)
	}
}

// CreateScheduleScheduleTimetable1Months - Month, in three letters format.
type CreateScheduleScheduleTimetable1Months string

const (
	CreateScheduleScheduleTimetable1MonthsMar CreateScheduleScheduleTimetable1Months = "MAR"
	CreateScheduleScheduleTimetable1MonthsNov CreateScheduleScheduleTimetable1Months = "NOV"
	CreateScheduleScheduleTimetable1MonthsDec CreateScheduleScheduleTimetable1Months = "DEC"
	CreateScheduleScheduleTimetable1MonthsJun CreateScheduleScheduleTimetable1Months = "JUN"
	CreateScheduleScheduleTimetable1MonthsMay CreateScheduleScheduleTimetable1Months = "MAY"
	CreateScheduleScheduleTimetable1MonthsOct CreateScheduleScheduleTimetable1Months = "OCT"
	CreateScheduleScheduleTimetable1MonthsFeb CreateScheduleScheduleTimetable1Months = "FEB"
	CreateScheduleScheduleTimetable1MonthsApr CreateScheduleScheduleTimetable1Months = "APR"
	CreateScheduleScheduleTimetable1MonthsSep CreateScheduleScheduleTimetable1Months = "SEP"
	CreateScheduleScheduleTimetable1MonthsAug CreateScheduleScheduleTimetable1Months = "AUG"
	CreateScheduleScheduleTimetable1MonthsJan CreateScheduleScheduleTimetable1Months = "JAN"
	CreateScheduleScheduleTimetable1MonthsJul CreateScheduleScheduleTimetable1Months = "JUL"
)

func (e CreateScheduleScheduleTimetable1Months) ToPointer() *CreateScheduleScheduleTimetable1Months {
	return &e
}

func (e *CreateScheduleScheduleTimetable1Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = CreateScheduleScheduleTimetable1Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleScheduleTimetable1Months: %v", v)
	}
}

// CreateScheduleScheduleTimetable1 - Timetable that specifies when a schedule triggers.
type CreateScheduleScheduleTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []CreateScheduleScheduleTimetable1DaysOfWeek `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []CreateScheduleScheduleTimetable1Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// CreateScheduleSchedule - A schedule response
type CreateScheduleSchedule struct {
	// The attribution actor who will run the scheduled pipeline.
	Actor CreateScheduleScheduleUser `json:"actor"`
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created-at"`
	// Description of the schedule.
	Description string `json:"description"`
	// The unique ID of the schedule.
	ID string `json:"id"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// The project-slug for the schedule
	ProjectSlug string `json:"project-slug"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
	// The date and time the pipeline was last updated.
	UpdatedAt time.Time `json:"updated-at"`
}

type CreateScheduleResponse struct {
	ContentType string
	// A schedule object.
	Schedule    *CreateScheduleSchedule
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	CreateScheduleDefaultApplicationJSONObject *CreateScheduleDefaultApplicationJSON
}
