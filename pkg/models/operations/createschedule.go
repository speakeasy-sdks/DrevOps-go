// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// CreateScheduleCreateScheduleParametersAttributionActorEnum - The attribution-actor of the scheduled pipeline.
type CreateScheduleCreateScheduleParametersAttributionActorEnum string

const (
	CreateScheduleCreateScheduleParametersAttributionActorEnumCurrent CreateScheduleCreateScheduleParametersAttributionActorEnum = "current"
	CreateScheduleCreateScheduleParametersAttributionActorEnumSystem  CreateScheduleCreateScheduleParametersAttributionActorEnum = "system"
)

func (e CreateScheduleCreateScheduleParametersAttributionActorEnum) ToPointer() *CreateScheduleCreateScheduleParametersAttributionActorEnum {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersAttributionActorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "current":
		fallthrough
	case "system":
		*e = CreateScheduleCreateScheduleParametersAttributionActorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersAttributionActorEnum: %s", s)
	}
}

// CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum - Day in a week, in three letters format
type CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum string

const (
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnumTue CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum = "TUE"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnumSat CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum = "SAT"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnumSun CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum = "SUN"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnumMon CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum = "MON"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnumThu CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum = "THU"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnumWed CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum = "WED"
	CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnumFri CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum = "FRI"
)

func (e CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum) ToPointer() *CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum: %s", s)
	}
}

// CreateScheduleCreateScheduleParametersTimetable2MonthsEnum - Month, in three letters format.
type CreateScheduleCreateScheduleParametersTimetable2MonthsEnum string

const (
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumMar CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "MAR"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumNov CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "NOV"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumDec CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "DEC"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumJun CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "JUN"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumMay CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "MAY"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumOct CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "OCT"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumFeb CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "FEB"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumApr CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "APR"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumSep CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "SEP"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumAug CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "AUG"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumJan CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "JAN"
	CreateScheduleCreateScheduleParametersTimetable2MonthsEnumJul CreateScheduleCreateScheduleParametersTimetable2MonthsEnum = "JUL"
)

func (e CreateScheduleCreateScheduleParametersTimetable2MonthsEnum) ToPointer() *CreateScheduleCreateScheduleParametersTimetable2MonthsEnum {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersTimetable2MonthsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = CreateScheduleCreateScheduleParametersTimetable2MonthsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersTimetable2MonthsEnum: %s", s)
	}
}

// CreateScheduleCreateScheduleParametersTimetable2 - Timetable that specifies when a schedule triggers.
type CreateScheduleCreateScheduleParametersTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []CreateScheduleCreateScheduleParametersTimetable2DaysOfWeekEnum `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []CreateScheduleCreateScheduleParametersTimetable2MonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum - Day in a week, in three letters format
type CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum string

const (
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnumTue CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum = "TUE"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnumSat CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum = "SAT"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnumSun CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum = "SUN"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnumMon CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum = "MON"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnumThu CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum = "THU"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnumWed CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum = "WED"
	CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnumFri CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum = "FRI"
)

func (e CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum) ToPointer() *CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum: %s", s)
	}
}

// CreateScheduleCreateScheduleParametersTimetable1MonthsEnum - Month, in three letters format.
type CreateScheduleCreateScheduleParametersTimetable1MonthsEnum string

const (
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumMar CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "MAR"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumNov CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "NOV"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumDec CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "DEC"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumJun CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "JUN"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumMay CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "MAY"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumOct CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "OCT"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumFeb CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "FEB"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumApr CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "APR"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumSep CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "SEP"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumAug CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "AUG"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumJan CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "JAN"
	CreateScheduleCreateScheduleParametersTimetable1MonthsEnumJul CreateScheduleCreateScheduleParametersTimetable1MonthsEnum = "JUL"
)

func (e CreateScheduleCreateScheduleParametersTimetable1MonthsEnum) ToPointer() *CreateScheduleCreateScheduleParametersTimetable1MonthsEnum {
	return &e
}

func (e *CreateScheduleCreateScheduleParametersTimetable1MonthsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = CreateScheduleCreateScheduleParametersTimetable1MonthsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleCreateScheduleParametersTimetable1MonthsEnum: %s", s)
	}
}

// CreateScheduleCreateScheduleParametersTimetable1 - Timetable that specifies when a schedule triggers.
type CreateScheduleCreateScheduleParametersTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []CreateScheduleCreateScheduleParametersTimetable1DaysOfWeekEnum `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []CreateScheduleCreateScheduleParametersTimetable1MonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// CreateScheduleCreateScheduleParameters - The parameters for a create schedule request
type CreateScheduleCreateScheduleParameters struct {
	// The attribution-actor of the scheduled pipeline.
	AttributionActor CreateScheduleCreateScheduleParametersAttributionActorEnum `json:"attribution-actor"`
	// Description of the schedule.
	Description *string `json:"description,omitempty"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
}

type CreateScheduleRequest struct {
	RequestBody *CreateScheduleCreateScheduleParameters `request:"mediaType=application/json"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
}

// CreateScheduleDefaultApplicationJSON - Error response.
type CreateScheduleDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// CreateScheduleScheduleUser - The attribution actor who will run the scheduled pipeline.
type CreateScheduleScheduleUser struct {
	// The unique ID of the user.
	ID string `json:"id"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
	// The name of the user.
	Name string `json:"name"`
}

// CreateScheduleScheduleTimetable2DaysOfWeekEnum - Day in a week, in three letters format
type CreateScheduleScheduleTimetable2DaysOfWeekEnum string

const (
	CreateScheduleScheduleTimetable2DaysOfWeekEnumTue CreateScheduleScheduleTimetable2DaysOfWeekEnum = "TUE"
	CreateScheduleScheduleTimetable2DaysOfWeekEnumSat CreateScheduleScheduleTimetable2DaysOfWeekEnum = "SAT"
	CreateScheduleScheduleTimetable2DaysOfWeekEnumSun CreateScheduleScheduleTimetable2DaysOfWeekEnum = "SUN"
	CreateScheduleScheduleTimetable2DaysOfWeekEnumMon CreateScheduleScheduleTimetable2DaysOfWeekEnum = "MON"
	CreateScheduleScheduleTimetable2DaysOfWeekEnumThu CreateScheduleScheduleTimetable2DaysOfWeekEnum = "THU"
	CreateScheduleScheduleTimetable2DaysOfWeekEnumWed CreateScheduleScheduleTimetable2DaysOfWeekEnum = "WED"
	CreateScheduleScheduleTimetable2DaysOfWeekEnumFri CreateScheduleScheduleTimetable2DaysOfWeekEnum = "FRI"
)

func (e CreateScheduleScheduleTimetable2DaysOfWeekEnum) ToPointer() *CreateScheduleScheduleTimetable2DaysOfWeekEnum {
	return &e
}

func (e *CreateScheduleScheduleTimetable2DaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = CreateScheduleScheduleTimetable2DaysOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleScheduleTimetable2DaysOfWeekEnum: %s", s)
	}
}

// CreateScheduleScheduleTimetable2MonthsEnum - Month, in three letters format.
type CreateScheduleScheduleTimetable2MonthsEnum string

const (
	CreateScheduleScheduleTimetable2MonthsEnumMar CreateScheduleScheduleTimetable2MonthsEnum = "MAR"
	CreateScheduleScheduleTimetable2MonthsEnumNov CreateScheduleScheduleTimetable2MonthsEnum = "NOV"
	CreateScheduleScheduleTimetable2MonthsEnumDec CreateScheduleScheduleTimetable2MonthsEnum = "DEC"
	CreateScheduleScheduleTimetable2MonthsEnumJun CreateScheduleScheduleTimetable2MonthsEnum = "JUN"
	CreateScheduleScheduleTimetable2MonthsEnumMay CreateScheduleScheduleTimetable2MonthsEnum = "MAY"
	CreateScheduleScheduleTimetable2MonthsEnumOct CreateScheduleScheduleTimetable2MonthsEnum = "OCT"
	CreateScheduleScheduleTimetable2MonthsEnumFeb CreateScheduleScheduleTimetable2MonthsEnum = "FEB"
	CreateScheduleScheduleTimetable2MonthsEnumApr CreateScheduleScheduleTimetable2MonthsEnum = "APR"
	CreateScheduleScheduleTimetable2MonthsEnumSep CreateScheduleScheduleTimetable2MonthsEnum = "SEP"
	CreateScheduleScheduleTimetable2MonthsEnumAug CreateScheduleScheduleTimetable2MonthsEnum = "AUG"
	CreateScheduleScheduleTimetable2MonthsEnumJan CreateScheduleScheduleTimetable2MonthsEnum = "JAN"
	CreateScheduleScheduleTimetable2MonthsEnumJul CreateScheduleScheduleTimetable2MonthsEnum = "JUL"
)

func (e CreateScheduleScheduleTimetable2MonthsEnum) ToPointer() *CreateScheduleScheduleTimetable2MonthsEnum {
	return &e
}

func (e *CreateScheduleScheduleTimetable2MonthsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = CreateScheduleScheduleTimetable2MonthsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleScheduleTimetable2MonthsEnum: %s", s)
	}
}

// CreateScheduleScheduleTimetable2 - Timetable that specifies when a schedule triggers.
type CreateScheduleScheduleTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []CreateScheduleScheduleTimetable2DaysOfWeekEnum `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []CreateScheduleScheduleTimetable2MonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// CreateScheduleScheduleTimetable1DaysOfWeekEnum - Day in a week, in three letters format
type CreateScheduleScheduleTimetable1DaysOfWeekEnum string

const (
	CreateScheduleScheduleTimetable1DaysOfWeekEnumTue CreateScheduleScheduleTimetable1DaysOfWeekEnum = "TUE"
	CreateScheduleScheduleTimetable1DaysOfWeekEnumSat CreateScheduleScheduleTimetable1DaysOfWeekEnum = "SAT"
	CreateScheduleScheduleTimetable1DaysOfWeekEnumSun CreateScheduleScheduleTimetable1DaysOfWeekEnum = "SUN"
	CreateScheduleScheduleTimetable1DaysOfWeekEnumMon CreateScheduleScheduleTimetable1DaysOfWeekEnum = "MON"
	CreateScheduleScheduleTimetable1DaysOfWeekEnumThu CreateScheduleScheduleTimetable1DaysOfWeekEnum = "THU"
	CreateScheduleScheduleTimetable1DaysOfWeekEnumWed CreateScheduleScheduleTimetable1DaysOfWeekEnum = "WED"
	CreateScheduleScheduleTimetable1DaysOfWeekEnumFri CreateScheduleScheduleTimetable1DaysOfWeekEnum = "FRI"
)

func (e CreateScheduleScheduleTimetable1DaysOfWeekEnum) ToPointer() *CreateScheduleScheduleTimetable1DaysOfWeekEnum {
	return &e
}

func (e *CreateScheduleScheduleTimetable1DaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = CreateScheduleScheduleTimetable1DaysOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleScheduleTimetable1DaysOfWeekEnum: %s", s)
	}
}

// CreateScheduleScheduleTimetable1MonthsEnum - Month, in three letters format.
type CreateScheduleScheduleTimetable1MonthsEnum string

const (
	CreateScheduleScheduleTimetable1MonthsEnumMar CreateScheduleScheduleTimetable1MonthsEnum = "MAR"
	CreateScheduleScheduleTimetable1MonthsEnumNov CreateScheduleScheduleTimetable1MonthsEnum = "NOV"
	CreateScheduleScheduleTimetable1MonthsEnumDec CreateScheduleScheduleTimetable1MonthsEnum = "DEC"
	CreateScheduleScheduleTimetable1MonthsEnumJun CreateScheduleScheduleTimetable1MonthsEnum = "JUN"
	CreateScheduleScheduleTimetable1MonthsEnumMay CreateScheduleScheduleTimetable1MonthsEnum = "MAY"
	CreateScheduleScheduleTimetable1MonthsEnumOct CreateScheduleScheduleTimetable1MonthsEnum = "OCT"
	CreateScheduleScheduleTimetable1MonthsEnumFeb CreateScheduleScheduleTimetable1MonthsEnum = "FEB"
	CreateScheduleScheduleTimetable1MonthsEnumApr CreateScheduleScheduleTimetable1MonthsEnum = "APR"
	CreateScheduleScheduleTimetable1MonthsEnumSep CreateScheduleScheduleTimetable1MonthsEnum = "SEP"
	CreateScheduleScheduleTimetable1MonthsEnumAug CreateScheduleScheduleTimetable1MonthsEnum = "AUG"
	CreateScheduleScheduleTimetable1MonthsEnumJan CreateScheduleScheduleTimetable1MonthsEnum = "JAN"
	CreateScheduleScheduleTimetable1MonthsEnumJul CreateScheduleScheduleTimetable1MonthsEnum = "JUL"
)

func (e CreateScheduleScheduleTimetable1MonthsEnum) ToPointer() *CreateScheduleScheduleTimetable1MonthsEnum {
	return &e
}

func (e *CreateScheduleScheduleTimetable1MonthsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = CreateScheduleScheduleTimetable1MonthsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduleScheduleTimetable1MonthsEnum: %s", s)
	}
}

// CreateScheduleScheduleTimetable1 - Timetable that specifies when a schedule triggers.
type CreateScheduleScheduleTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []CreateScheduleScheduleTimetable1DaysOfWeekEnum `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []CreateScheduleScheduleTimetable1MonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// CreateScheduleSchedule - A schedule response
type CreateScheduleSchedule struct {
	// The attribution actor who will run the scheduled pipeline.
	Actor CreateScheduleScheduleUser `json:"actor"`
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created-at"`
	// Description of the schedule.
	Description string `json:"description"`
	// The unique ID of the schedule.
	ID string `json:"id"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// The project-slug for the schedule
	ProjectSlug string `json:"project-slug"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
	// The date and time the pipeline was last updated.
	UpdatedAt time.Time `json:"updated-at"`
}

type CreateScheduleResponse struct {
	ContentType string
	// A schedule object.
	Schedule    *CreateScheduleSchedule
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	CreateScheduleDefaultApplicationJSONObject *CreateScheduleDefaultApplicationJSON
}
