// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetScheduleByIDRequest struct {
	// The unique ID of the schedule.
	ScheduleID string `pathParam:"style=simple,explode=false,name=schedule-id"`
}

// GetScheduleByIDDefaultApplicationJSON - Error response.
type GetScheduleByIDDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// GetScheduleByIDScheduleUser - The attribution actor who will run the scheduled pipeline.
type GetScheduleByIDScheduleUser struct {
	// The unique ID of the user.
	ID string `json:"id"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
	// The name of the user.
	Name string `json:"name"`
}

// GetScheduleByIDScheduleTimetable2DaysOfWeek - Day in a week, in three letters format
type GetScheduleByIDScheduleTimetable2DaysOfWeek string

const (
	GetScheduleByIDScheduleTimetable2DaysOfWeekTue GetScheduleByIDScheduleTimetable2DaysOfWeek = "TUE"
	GetScheduleByIDScheduleTimetable2DaysOfWeekSat GetScheduleByIDScheduleTimetable2DaysOfWeek = "SAT"
	GetScheduleByIDScheduleTimetable2DaysOfWeekSun GetScheduleByIDScheduleTimetable2DaysOfWeek = "SUN"
	GetScheduleByIDScheduleTimetable2DaysOfWeekMon GetScheduleByIDScheduleTimetable2DaysOfWeek = "MON"
	GetScheduleByIDScheduleTimetable2DaysOfWeekThu GetScheduleByIDScheduleTimetable2DaysOfWeek = "THU"
	GetScheduleByIDScheduleTimetable2DaysOfWeekWed GetScheduleByIDScheduleTimetable2DaysOfWeek = "WED"
	GetScheduleByIDScheduleTimetable2DaysOfWeekFri GetScheduleByIDScheduleTimetable2DaysOfWeek = "FRI"
)

func (e GetScheduleByIDScheduleTimetable2DaysOfWeek) ToPointer() *GetScheduleByIDScheduleTimetable2DaysOfWeek {
	return &e
}

func (e *GetScheduleByIDScheduleTimetable2DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = GetScheduleByIDScheduleTimetable2DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScheduleByIDScheduleTimetable2DaysOfWeek: %v", v)
	}
}

// GetScheduleByIDScheduleTimetable2Months - Month, in three letters format.
type GetScheduleByIDScheduleTimetable2Months string

const (
	GetScheduleByIDScheduleTimetable2MonthsMar GetScheduleByIDScheduleTimetable2Months = "MAR"
	GetScheduleByIDScheduleTimetable2MonthsNov GetScheduleByIDScheduleTimetable2Months = "NOV"
	GetScheduleByIDScheduleTimetable2MonthsDec GetScheduleByIDScheduleTimetable2Months = "DEC"
	GetScheduleByIDScheduleTimetable2MonthsJun GetScheduleByIDScheduleTimetable2Months = "JUN"
	GetScheduleByIDScheduleTimetable2MonthsMay GetScheduleByIDScheduleTimetable2Months = "MAY"
	GetScheduleByIDScheduleTimetable2MonthsOct GetScheduleByIDScheduleTimetable2Months = "OCT"
	GetScheduleByIDScheduleTimetable2MonthsFeb GetScheduleByIDScheduleTimetable2Months = "FEB"
	GetScheduleByIDScheduleTimetable2MonthsApr GetScheduleByIDScheduleTimetable2Months = "APR"
	GetScheduleByIDScheduleTimetable2MonthsSep GetScheduleByIDScheduleTimetable2Months = "SEP"
	GetScheduleByIDScheduleTimetable2MonthsAug GetScheduleByIDScheduleTimetable2Months = "AUG"
	GetScheduleByIDScheduleTimetable2MonthsJan GetScheduleByIDScheduleTimetable2Months = "JAN"
	GetScheduleByIDScheduleTimetable2MonthsJul GetScheduleByIDScheduleTimetable2Months = "JUL"
)

func (e GetScheduleByIDScheduleTimetable2Months) ToPointer() *GetScheduleByIDScheduleTimetable2Months {
	return &e
}

func (e *GetScheduleByIDScheduleTimetable2Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = GetScheduleByIDScheduleTimetable2Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScheduleByIDScheduleTimetable2Months: %v", v)
	}
}

// GetScheduleByIDScheduleTimetable2 - Timetable that specifies when a schedule triggers.
type GetScheduleByIDScheduleTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []GetScheduleByIDScheduleTimetable2DaysOfWeek `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []GetScheduleByIDScheduleTimetable2Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// GetScheduleByIDScheduleTimetable1DaysOfWeek - Day in a week, in three letters format
type GetScheduleByIDScheduleTimetable1DaysOfWeek string

const (
	GetScheduleByIDScheduleTimetable1DaysOfWeekTue GetScheduleByIDScheduleTimetable1DaysOfWeek = "TUE"
	GetScheduleByIDScheduleTimetable1DaysOfWeekSat GetScheduleByIDScheduleTimetable1DaysOfWeek = "SAT"
	GetScheduleByIDScheduleTimetable1DaysOfWeekSun GetScheduleByIDScheduleTimetable1DaysOfWeek = "SUN"
	GetScheduleByIDScheduleTimetable1DaysOfWeekMon GetScheduleByIDScheduleTimetable1DaysOfWeek = "MON"
	GetScheduleByIDScheduleTimetable1DaysOfWeekThu GetScheduleByIDScheduleTimetable1DaysOfWeek = "THU"
	GetScheduleByIDScheduleTimetable1DaysOfWeekWed GetScheduleByIDScheduleTimetable1DaysOfWeek = "WED"
	GetScheduleByIDScheduleTimetable1DaysOfWeekFri GetScheduleByIDScheduleTimetable1DaysOfWeek = "FRI"
)

func (e GetScheduleByIDScheduleTimetable1DaysOfWeek) ToPointer() *GetScheduleByIDScheduleTimetable1DaysOfWeek {
	return &e
}

func (e *GetScheduleByIDScheduleTimetable1DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = GetScheduleByIDScheduleTimetable1DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScheduleByIDScheduleTimetable1DaysOfWeek: %v", v)
	}
}

// GetScheduleByIDScheduleTimetable1Months - Month, in three letters format.
type GetScheduleByIDScheduleTimetable1Months string

const (
	GetScheduleByIDScheduleTimetable1MonthsMar GetScheduleByIDScheduleTimetable1Months = "MAR"
	GetScheduleByIDScheduleTimetable1MonthsNov GetScheduleByIDScheduleTimetable1Months = "NOV"
	GetScheduleByIDScheduleTimetable1MonthsDec GetScheduleByIDScheduleTimetable1Months = "DEC"
	GetScheduleByIDScheduleTimetable1MonthsJun GetScheduleByIDScheduleTimetable1Months = "JUN"
	GetScheduleByIDScheduleTimetable1MonthsMay GetScheduleByIDScheduleTimetable1Months = "MAY"
	GetScheduleByIDScheduleTimetable1MonthsOct GetScheduleByIDScheduleTimetable1Months = "OCT"
	GetScheduleByIDScheduleTimetable1MonthsFeb GetScheduleByIDScheduleTimetable1Months = "FEB"
	GetScheduleByIDScheduleTimetable1MonthsApr GetScheduleByIDScheduleTimetable1Months = "APR"
	GetScheduleByIDScheduleTimetable1MonthsSep GetScheduleByIDScheduleTimetable1Months = "SEP"
	GetScheduleByIDScheduleTimetable1MonthsAug GetScheduleByIDScheduleTimetable1Months = "AUG"
	GetScheduleByIDScheduleTimetable1MonthsJan GetScheduleByIDScheduleTimetable1Months = "JAN"
	GetScheduleByIDScheduleTimetable1MonthsJul GetScheduleByIDScheduleTimetable1Months = "JUL"
)

func (e GetScheduleByIDScheduleTimetable1Months) ToPointer() *GetScheduleByIDScheduleTimetable1Months {
	return &e
}

func (e *GetScheduleByIDScheduleTimetable1Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = GetScheduleByIDScheduleTimetable1Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScheduleByIDScheduleTimetable1Months: %v", v)
	}
}

// GetScheduleByIDScheduleTimetable1 - Timetable that specifies when a schedule triggers.
type GetScheduleByIDScheduleTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []GetScheduleByIDScheduleTimetable1DaysOfWeek `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []GetScheduleByIDScheduleTimetable1Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// GetScheduleByIDSchedule - A schedule response
type GetScheduleByIDSchedule struct {
	// The attribution actor who will run the scheduled pipeline.
	Actor GetScheduleByIDScheduleUser `json:"actor"`
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created-at"`
	// Description of the schedule.
	Description string `json:"description"`
	// The unique ID of the schedule.
	ID string `json:"id"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// The project-slug for the schedule
	ProjectSlug string `json:"project-slug"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
	// The date and time the pipeline was last updated.
	UpdatedAt time.Time `json:"updated-at"`
}

type GetScheduleByIDResponse struct {
	ContentType string
	// A schedule object.
	Schedule    *GetScheduleByIDSchedule
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	GetScheduleByIDDefaultApplicationJSONObject *GetScheduleByIDDefaultApplicationJSON
}
