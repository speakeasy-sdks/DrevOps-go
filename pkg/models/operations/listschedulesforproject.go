// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ListSchedulesForProjectRequest struct {
	// A token to retrieve the next page of results.
	PageToken *string `queryParam:"style=form,explode=true,name=page-token"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
}

// ListSchedulesForProjectDefaultApplicationJSON - Error response.
type ListSchedulesForProjectDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// ListSchedulesForProject200ApplicationJSONScheduleUser - The attribution actor who will run the scheduled pipeline.
type ListSchedulesForProject200ApplicationJSONScheduleUser struct {
	// The unique ID of the user.
	ID string `json:"id"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
	// The name of the user.
	Name string `json:"name"`
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum - Day in a week, in three letters format
type ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum string

const (
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnumTue ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum = "TUE"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnumSat ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum = "SAT"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnumSun ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum = "SUN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnumMon ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum = "MON"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnumThu ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum = "THU"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnumWed ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum = "WED"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnumFri ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum = "FRI"
)

func (e ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum) ToPointer() *ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum {
	return &e
}

func (e *ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum: %s", s)
	}
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum - Month, in three letters format.
type ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum string

const (
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumMar ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "MAR"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumNov ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "NOV"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumDec ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "DEC"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumJun ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "JUN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumMay ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "MAY"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumOct ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "OCT"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumFeb ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "FEB"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumApr ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "APR"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumSep ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "SEP"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumAug ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "AUG"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumJan ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "JAN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnumJul ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum = "JUL"
)

func (e ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum) ToPointer() *ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum {
	return &e
}

func (e *ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum: %s", s)
	}
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable2 - Timetable that specifies when a schedule triggers.
type ListSchedulesForProject200ApplicationJSONScheduleTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekEnum `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum - Day in a week, in three letters format
type ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum string

const (
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnumTue ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum = "TUE"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnumSat ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum = "SAT"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnumSun ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum = "SUN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnumMon ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum = "MON"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnumThu ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum = "THU"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnumWed ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum = "WED"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnumFri ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum = "FRI"
)

func (e ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum) ToPointer() *ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum {
	return &e
}

func (e *ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum: %s", s)
	}
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum - Month, in three letters format.
type ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum string

const (
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumMar ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "MAR"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumNov ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "NOV"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumDec ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "DEC"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumJun ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "JUN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumMay ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "MAY"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumOct ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "OCT"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumFeb ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "FEB"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumApr ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "APR"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumSep ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "SEP"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumAug ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "AUG"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumJan ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "JAN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnumJul ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum = "JUL"
)

func (e ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum) ToPointer() *ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum {
	return &e
}

func (e *ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum: %s", s)
	}
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable1 - Timetable that specifies when a schedule triggers.
type ListSchedulesForProject200ApplicationJSONScheduleTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekEnum `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsEnum `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// ListSchedulesForProject200ApplicationJSONSchedule - A schedule response
type ListSchedulesForProject200ApplicationJSONSchedule struct {
	// The attribution actor who will run the scheduled pipeline.
	Actor ListSchedulesForProject200ApplicationJSONScheduleUser `json:"actor"`
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created-at"`
	// Description of the schedule.
	Description string `json:"description"`
	// The unique ID of the schedule.
	ID string `json:"id"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// The project-slug for the schedule
	ProjectSlug string `json:"project-slug"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
	// The date and time the pipeline was last updated.
	UpdatedAt time.Time `json:"updated-at"`
}

// ListSchedulesForProject200ApplicationJSON - A sequence of schedules
type ListSchedulesForProject200ApplicationJSON struct {
	Items []ListSchedulesForProject200ApplicationJSONSchedule `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type ListSchedulesForProjectResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A sequence of schedules.
	ListSchedulesForProject200ApplicationJSONObject *ListSchedulesForProject200ApplicationJSON
	// Error response.
	ListSchedulesForProjectDefaultApplicationJSONObject *ListSchedulesForProjectDefaultApplicationJSON
}
