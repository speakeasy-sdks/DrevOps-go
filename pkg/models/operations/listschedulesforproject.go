// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ListSchedulesForProjectRequest struct {
	// A token to retrieve the next page of results.
	PageToken *string `queryParam:"style=form,explode=true,name=page-token"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
}

// ListSchedulesForProjectDefaultApplicationJSON - Error response.
type ListSchedulesForProjectDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// ListSchedulesForProject200ApplicationJSONScheduleUser - The attribution actor who will run the scheduled pipeline.
type ListSchedulesForProject200ApplicationJSONScheduleUser struct {
	// The unique ID of the user.
	ID string `json:"id"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
	// The name of the user.
	Name string `json:"name"`
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek - Day in a week, in three letters format
type ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek string

const (
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekTue ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek = "TUE"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekSat ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek = "SAT"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekSun ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek = "SUN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekMon ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek = "MON"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekThu ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek = "THU"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekWed ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek = "WED"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeekFri ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek = "FRI"
)

func (e ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek) ToPointer() *ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek {
	return &e
}

func (e *ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek: %v", v)
	}
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months - Month, in three letters format.
type ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months string

const (
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsMar ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "MAR"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsNov ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "NOV"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsDec ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "DEC"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsJun ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "JUN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsMay ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "MAY"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsOct ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "OCT"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsFeb ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "FEB"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsApr ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "APR"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsSep ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "SEP"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsAug ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "AUG"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsJan ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "JAN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable2MonthsJul ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months = "JUL"
)

func (e ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months) ToPointer() *ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months {
	return &e
}

func (e *ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months: %v", v)
	}
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable2 - Timetable that specifies when a schedule triggers.
type ListSchedulesForProject200ApplicationJSONScheduleTimetable2 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []ListSchedulesForProject200ApplicationJSONScheduleTimetable2DaysOfWeek `json:"days-of-week,omitempty"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []ListSchedulesForProject200ApplicationJSONScheduleTimetable2Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek - Day in a week, in three letters format
type ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek string

const (
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekTue ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek = "TUE"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekSat ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek = "SAT"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekSun ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek = "SUN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekMon ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek = "MON"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekThu ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek = "THU"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekWed ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek = "WED"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeekFri ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek = "FRI"
)

func (e ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek) ToPointer() *ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek {
	return &e
}

func (e *ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TUE":
		fallthrough
	case "SAT":
		fallthrough
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "THU":
		fallthrough
	case "WED":
		fallthrough
	case "FRI":
		*e = ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek: %v", v)
	}
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months - Month, in three letters format.
type ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months string

const (
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsMar ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "MAR"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsNov ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "NOV"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsDec ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "DEC"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsJun ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "JUN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsMay ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "MAY"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsOct ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "OCT"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsFeb ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "FEB"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsApr ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "APR"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsSep ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "SEP"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsAug ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "AUG"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsJan ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "JAN"
	ListSchedulesForProject200ApplicationJSONScheduleTimetable1MonthsJul ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months = "JUL"
)

func (e ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months) ToPointer() *ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months {
	return &e
}

func (e *ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAR":
		fallthrough
	case "NOV":
		fallthrough
	case "DEC":
		fallthrough
	case "JUN":
		fallthrough
	case "MAY":
		fallthrough
	case "OCT":
		fallthrough
	case "FEB":
		fallthrough
	case "APR":
		fallthrough
	case "SEP":
		fallthrough
	case "AUG":
		fallthrough
	case "JAN":
		fallthrough
	case "JUL":
		*e = ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months: %v", v)
	}
}

// ListSchedulesForProject200ApplicationJSONScheduleTimetable1 - Timetable that specifies when a schedule triggers.
type ListSchedulesForProject200ApplicationJSONScheduleTimetable1 struct {
	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []int64 `json:"days-of-month,omitempty"`
	// Days in a week in which the schedule triggers.
	DaysOfWeek []ListSchedulesForProject200ApplicationJSONScheduleTimetable1DaysOfWeek `json:"days-of-week"`
	// Hours in a day in which the schedule triggers.
	HoursOfDay []int64 `json:"hours-of-day"`
	// Months in which the schedule triggers.
	Months []ListSchedulesForProject200ApplicationJSONScheduleTimetable1Months `json:"months,omitempty"`
	// Number of times a schedule triggers per hour, value must be between 1 and 60
	PerHour int64 `json:"per-hour"`
}

// ListSchedulesForProject200ApplicationJSONSchedule - A schedule response
type ListSchedulesForProject200ApplicationJSONSchedule struct {
	// The attribution actor who will run the scheduled pipeline.
	Actor ListSchedulesForProject200ApplicationJSONScheduleUser `json:"actor"`
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created-at"`
	// Description of the schedule.
	Description string `json:"description"`
	// The unique ID of the schedule.
	ID string `json:"id"`
	// Name of the schedule.
	Name string `json:"name"`
	// Pipeline parameters represented as key-value pairs. Must contain branch or tag.
	Parameters map[string]interface{} `json:"parameters"`
	// The project-slug for the schedule
	ProjectSlug string `json:"project-slug"`
	// Timetable that specifies when a schedule triggers.
	Timetable interface{} `json:"timetable"`
	// The date and time the pipeline was last updated.
	UpdatedAt time.Time `json:"updated-at"`
}

// ListSchedulesForProject200ApplicationJSON - A sequence of schedules
type ListSchedulesForProject200ApplicationJSON struct {
	Items []ListSchedulesForProject200ApplicationJSONSchedule `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type ListSchedulesForProjectResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A sequence of schedules.
	ListSchedulesForProject200ApplicationJSONObject *ListSchedulesForProject200ApplicationJSON
	// Error response.
	ListSchedulesForProjectDefaultApplicationJSONObject *ListSchedulesForProjectDefaultApplicationJSON
}
