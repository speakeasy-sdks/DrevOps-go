// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// TriggerPipelineTriggerPipelineParameters - The information you can supply when triggering a pipeline.
type TriggerPipelineTriggerPipelineParameters struct {
	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`
	// An object containing pipeline parameters and their values.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
	Tag *string `json:"tag,omitempty"`
}

type TriggerPipelineRequest struct {
	RequestBody *TriggerPipelineTriggerPipelineParameters `request:"mediaType=application/json"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
}

// TriggerPipelineDefaultApplicationJSON - Error response.
type TriggerPipelineDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// TriggerPipelinePipelineCreationStateEnum - The current state of the pipeline.
type TriggerPipelinePipelineCreationStateEnum string

const (
	TriggerPipelinePipelineCreationStateEnumCreated      TriggerPipelinePipelineCreationStateEnum = "created"
	TriggerPipelinePipelineCreationStateEnumErrored      TriggerPipelinePipelineCreationStateEnum = "errored"
	TriggerPipelinePipelineCreationStateEnumSetupPending TriggerPipelinePipelineCreationStateEnum = "setup-pending"
	TriggerPipelinePipelineCreationStateEnumSetup        TriggerPipelinePipelineCreationStateEnum = "setup"
	TriggerPipelinePipelineCreationStateEnumPending      TriggerPipelinePipelineCreationStateEnum = "pending"
)

func (e TriggerPipelinePipelineCreationStateEnum) ToPointer() *TriggerPipelinePipelineCreationStateEnum {
	return &e
}

func (e *TriggerPipelinePipelineCreationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created":
		fallthrough
	case "errored":
		fallthrough
	case "setup-pending":
		fallthrough
	case "setup":
		fallthrough
	case "pending":
		*e = TriggerPipelinePipelineCreationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerPipelinePipelineCreationStateEnum: %s", s)
	}
}

// TriggerPipelinePipelineCreation - A pipeline creation response.
type TriggerPipelinePipelineCreation struct {
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created_at"`
	// The unique ID of the pipeline.
	ID string `json:"id"`
	// The number of the pipeline.
	Number int64 `json:"number"`
	// The current state of the pipeline.
	State TriggerPipelinePipelineCreationStateEnum `json:"state"`
}

type TriggerPipelineResponse struct {
	ContentType string
	// The created pipeline.
	PipelineCreation *TriggerPipelinePipelineCreation
	StatusCode       int
	RawResponse      *http.Response
	// Error response.
	TriggerPipelineDefaultApplicationJSONObject *TriggerPipelineDefaultApplicationJSON
}
