// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GetProjectWorkflowMetricsReportingWindow - The time window used to calculate summary metrics.
type GetProjectWorkflowMetricsReportingWindow string

const (
	GetProjectWorkflowMetricsReportingWindowLast7Days   GetProjectWorkflowMetricsReportingWindow = "last-7-days"
	GetProjectWorkflowMetricsReportingWindowLast90Days  GetProjectWorkflowMetricsReportingWindow = "last-90-days"
	GetProjectWorkflowMetricsReportingWindowLast24Hours GetProjectWorkflowMetricsReportingWindow = "last-24-hours"
	GetProjectWorkflowMetricsReportingWindowLast30Days  GetProjectWorkflowMetricsReportingWindow = "last-30-days"
	GetProjectWorkflowMetricsReportingWindowLast60Days  GetProjectWorkflowMetricsReportingWindow = "last-60-days"
)

func (e GetProjectWorkflowMetricsReportingWindow) ToPointer() *GetProjectWorkflowMetricsReportingWindow {
	return &e
}

func (e *GetProjectWorkflowMetricsReportingWindow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "last-7-days":
		fallthrough
	case "last-90-days":
		fallthrough
	case "last-24-hours":
		fallthrough
	case "last-30-days":
		fallthrough
	case "last-60-days":
		*e = GetProjectWorkflowMetricsReportingWindow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectWorkflowMetricsReportingWindow: %v", v)
	}
}

type GetProjectWorkflowMetricsRequest struct {
	// Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
	AllBranches *bool `queryParam:"style=form,explode=true,name=all-branches"`
	// The name of a vcs branch. If not passed we will scope the API call to the default branch.
	Branch *string `queryParam:"style=form,explode=true,name=branch"`
	// A token to retrieve the next page of results.
	PageToken *string `queryParam:"style=form,explode=true,name=page-token"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
	// The time window used to calculate summary metrics.
	ReportingWindow *GetProjectWorkflowMetricsReportingWindow `queryParam:"style=form,explode=true,name=reporting-window"`
}

// GetProjectWorkflowMetricsDefaultApplicationJSON - Error response.
type GetProjectWorkflowMetricsDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// GetProjectWorkflowMetrics200ApplicationJSONItemsMetricsDurationMetrics - Metrics relating to the duration of runs for a workflow.
type GetProjectWorkflowMetrics200ApplicationJSONItemsMetricsDurationMetrics struct {
	// The max duration, in seconds, among a group of runs.
	Max int64 `json:"max"`
	// The mean duration, in seconds, among a group of runs.
	Mean int64 `json:"mean"`
	// The median duration, in seconds, among a group of runs.
	Median int64 `json:"median"`
	// The minimum duration, in seconds, among a group of runs.
	Min int64 `json:"min"`
	// The 95th percentile duration, in seconds, among a group of runs.
	P95 int64 `json:"p95"`
	// The standard deviation, in seconds, among a group of runs.
	StandardDeviation float32 `json:"standard_deviation"`
}

// GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics - Metrics relating to a workflow's runs.
type GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics struct {
	// Metrics relating to the duration of runs for a workflow.
	DurationMetrics GetProjectWorkflowMetrics200ApplicationJSONItemsMetricsDurationMetrics `json:"duration_metrics"`
	// The number of failed runs.
	FailedRuns int64 `json:"failed_runs"`
	// The mean time to recovery (mean time between failures and their next success) in seconds.
	Mttr        int64   `json:"mttr"`
	SuccessRate float32 `json:"success_rate"`
	// The number of successful runs.
	SuccessfulRuns int64 `json:"successful_runs"`
	// The average number of runs per day.
	Throughput float32 `json:"throughput"`
	// The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
	TotalCreditsUsed int64 `json:"total_credits_used"`
	// The number of recovered workflow executions per day.
	TotalRecoveries int64 `json:"total_recoveries"`
	// The total number of runs.
	TotalRuns int64 `json:"total_runs"`
}

type GetProjectWorkflowMetrics200ApplicationJSONItems struct {
	// Metrics relating to a workflow's runs.
	Metrics GetProjectWorkflowMetrics200ApplicationJSONItemsMetrics `json:"metrics"`
	// The name of the workflow.
	Name string `json:"name"`
	// The end of the aggregation window for workflow metrics.
	WindowEnd time.Time `json:"window_end"`
	// The start of the aggregation window for workflow metrics.
	WindowStart time.Time `json:"window_start"`
}

// GetProjectWorkflowMetrics200ApplicationJSON - Paginated workflow summary metrics.
type GetProjectWorkflowMetrics200ApplicationJSON struct {
	// Workflow summary metrics.
	Items []GetProjectWorkflowMetrics200ApplicationJSONItems `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type GetProjectWorkflowMetricsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A paginated list of summary metrics by workflow
	GetProjectWorkflowMetrics200ApplicationJSONObject *GetProjectWorkflowMetrics200ApplicationJSON
	// Error response.
	GetProjectWorkflowMetricsDefaultApplicationJSONObject *GetProjectWorkflowMetricsDefaultApplicationJSON
}
