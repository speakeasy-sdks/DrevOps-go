// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetPipelineByNumberRequest struct {
	// The number of the pipeline.
	PipelineNumber interface{} `pathParam:"style=simple,explode=false,name=pipeline-number"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
}

// GetPipelineByNumberDefaultApplicationJSON - Error response.
type GetPipelineByNumberDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// GetPipelineByNumberPipelineErrorsType - The type of error.
type GetPipelineByNumberPipelineErrorsType string

const (
	GetPipelineByNumberPipelineErrorsTypeConfig      GetPipelineByNumberPipelineErrorsType = "config"
	GetPipelineByNumberPipelineErrorsTypeConfigFetch GetPipelineByNumberPipelineErrorsType = "config-fetch"
	GetPipelineByNumberPipelineErrorsTypeTimeout     GetPipelineByNumberPipelineErrorsType = "timeout"
	GetPipelineByNumberPipelineErrorsTypePermission  GetPipelineByNumberPipelineErrorsType = "permission"
	GetPipelineByNumberPipelineErrorsTypeOther       GetPipelineByNumberPipelineErrorsType = "other"
	GetPipelineByNumberPipelineErrorsTypePlan        GetPipelineByNumberPipelineErrorsType = "plan"
)

func (e GetPipelineByNumberPipelineErrorsType) ToPointer() *GetPipelineByNumberPipelineErrorsType {
	return &e
}

func (e *GetPipelineByNumberPipelineErrorsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "config":
		fallthrough
	case "config-fetch":
		fallthrough
	case "timeout":
		fallthrough
	case "permission":
		fallthrough
	case "other":
		fallthrough
	case "plan":
		*e = GetPipelineByNumberPipelineErrorsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPipelineByNumberPipelineErrorsType: %v", v)
	}
}

// GetPipelineByNumberPipelineErrors - An error with a type and message.
type GetPipelineByNumberPipelineErrors struct {
	// A human-readable error message.
	Message string `json:"message"`
	// The type of error.
	Type GetPipelineByNumberPipelineErrorsType `json:"type"`
}

// GetPipelineByNumberPipelineState - The current state of the pipeline.
type GetPipelineByNumberPipelineState string

const (
	GetPipelineByNumberPipelineStateCreated      GetPipelineByNumberPipelineState = "created"
	GetPipelineByNumberPipelineStateErrored      GetPipelineByNumberPipelineState = "errored"
	GetPipelineByNumberPipelineStateSetupPending GetPipelineByNumberPipelineState = "setup-pending"
	GetPipelineByNumberPipelineStateSetup        GetPipelineByNumberPipelineState = "setup"
	GetPipelineByNumberPipelineStatePending      GetPipelineByNumberPipelineState = "pending"
)

func (e GetPipelineByNumberPipelineState) ToPointer() *GetPipelineByNumberPipelineState {
	return &e
}

func (e *GetPipelineByNumberPipelineState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "errored":
		fallthrough
	case "setup-pending":
		fallthrough
	case "setup":
		fallthrough
	case "pending":
		*e = GetPipelineByNumberPipelineState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPipelineByNumberPipelineState: %v", v)
	}
}

// GetPipelineByNumberPipelineTriggerActor - The user who triggered the Pipeline.
type GetPipelineByNumberPipelineTriggerActor struct {
	// URL to the user's avatar on the VCS
	AvatarURL string `json:"avatar_url"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
}

// GetPipelineByNumberPipelineTriggerType - The type of trigger.
type GetPipelineByNumberPipelineTriggerType string

const (
	GetPipelineByNumberPipelineTriggerTypeScheduledPipeline GetPipelineByNumberPipelineTriggerType = "scheduled_pipeline"
	GetPipelineByNumberPipelineTriggerTypeExplicit          GetPipelineByNumberPipelineTriggerType = "explicit"
	GetPipelineByNumberPipelineTriggerTypeAPI               GetPipelineByNumberPipelineTriggerType = "api"
	GetPipelineByNumberPipelineTriggerTypeWebhook           GetPipelineByNumberPipelineTriggerType = "webhook"
)

func (e GetPipelineByNumberPipelineTriggerType) ToPointer() *GetPipelineByNumberPipelineTriggerType {
	return &e
}

func (e *GetPipelineByNumberPipelineTriggerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scheduled_pipeline":
		fallthrough
	case "explicit":
		fallthrough
	case "api":
		fallthrough
	case "webhook":
		*e = GetPipelineByNumberPipelineTriggerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPipelineByNumberPipelineTriggerType: %v", v)
	}
}

// GetPipelineByNumberPipelineTrigger - A summary of the trigger.
type GetPipelineByNumberPipelineTrigger struct {
	// The user who triggered the Pipeline.
	Actor GetPipelineByNumberPipelineTriggerActor `json:"actor"`
	// The date and time the trigger was received.
	ReceivedAt time.Time `json:"received_at"`
	// The type of trigger.
	Type GetPipelineByNumberPipelineTriggerType `json:"type"`
}

// GetPipelineByNumberPipelineVcsCommit - The latest commit in the pipeline.
type GetPipelineByNumberPipelineVcsCommit struct {
	// The body of the commit message.
	Body string `json:"body"`
	// The subject of the commit message.
	Subject string `json:"subject"`
}

// GetPipelineByNumberPipelineVcs - VCS information for the pipeline.
type GetPipelineByNumberPipelineVcs struct {
	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`
	// The latest commit in the pipeline.
	Commit *GetPipelineByNumberPipelineVcsCommit `json:"commit,omitempty"`
	// URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
	OriginRepositoryURL string `json:"origin_repository_url"`
	// Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName string `json:"provider_name"`
	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`
	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`
	// The code revision the pipeline ran.
	Revision string `json:"revision"`
	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
	Tag *string `json:"tag,omitempty"`
	// URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
	TargetRepositoryURL string `json:"target_repository_url"`
}

// GetPipelineByNumberPipeline - A pipeline response.
type GetPipelineByNumberPipeline struct {
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created_at"`
	// A sequence of errors that have occurred within the pipeline.
	Errors []GetPipelineByNumberPipelineErrors `json:"errors"`
	// The unique ID of the pipeline.
	ID string `json:"id"`
	// The number of the pipeline.
	Number int64 `json:"number"`
	// The project-slug for the pipeline.
	ProjectSlug string `json:"project_slug"`
	// The current state of the pipeline.
	State GetPipelineByNumberPipelineState `json:"state"`
	// A summary of the trigger.
	Trigger           GetPipelineByNumberPipelineTrigger `json:"trigger"`
	TriggerParameters map[string]interface{}             `json:"trigger_parameters,omitempty"`
	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// VCS information for the pipeline.
	Vcs *GetPipelineByNumberPipelineVcs `json:"vcs,omitempty"`
}

type GetPipelineByNumberResponse struct {
	ContentType string
	// A pipeline object.
	Pipeline    *GetPipelineByNumberPipeline
	StatusCode  int
	RawResponse *http.Response
	// Error response.
	GetPipelineByNumberDefaultApplicationJSONObject *GetPipelineByNumberDefaultApplicationJSON
}
