// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ListPipelinesForProjectRequest struct {
	// The name of a vcs branch.
	Branch *string `queryParam:"style=form,explode=true,name=branch"`
	// A token to retrieve the next page of results.
	PageToken *string `queryParam:"style=form,explode=true,name=page-token"`
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project-slug"`
}

// ListPipelinesForProjectDefaultApplicationJSON - Error response.
type ListPipelinesForProjectDefaultApplicationJSON struct {
	Message *string `json:"message,omitempty"`
}

// ListPipelinesForProjectPipelineListResponsePipelineErrorsType - The type of error.
type ListPipelinesForProjectPipelineListResponsePipelineErrorsType string

const (
	ListPipelinesForProjectPipelineListResponsePipelineErrorsTypeConfig      ListPipelinesForProjectPipelineListResponsePipelineErrorsType = "config"
	ListPipelinesForProjectPipelineListResponsePipelineErrorsTypeConfigFetch ListPipelinesForProjectPipelineListResponsePipelineErrorsType = "config-fetch"
	ListPipelinesForProjectPipelineListResponsePipelineErrorsTypeTimeout     ListPipelinesForProjectPipelineListResponsePipelineErrorsType = "timeout"
	ListPipelinesForProjectPipelineListResponsePipelineErrorsTypePermission  ListPipelinesForProjectPipelineListResponsePipelineErrorsType = "permission"
	ListPipelinesForProjectPipelineListResponsePipelineErrorsTypeOther       ListPipelinesForProjectPipelineListResponsePipelineErrorsType = "other"
	ListPipelinesForProjectPipelineListResponsePipelineErrorsTypePlan        ListPipelinesForProjectPipelineListResponsePipelineErrorsType = "plan"
)

func (e ListPipelinesForProjectPipelineListResponsePipelineErrorsType) ToPointer() *ListPipelinesForProjectPipelineListResponsePipelineErrorsType {
	return &e
}

func (e *ListPipelinesForProjectPipelineListResponsePipelineErrorsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "config":
		fallthrough
	case "config-fetch":
		fallthrough
	case "timeout":
		fallthrough
	case "permission":
		fallthrough
	case "other":
		fallthrough
	case "plan":
		*e = ListPipelinesForProjectPipelineListResponsePipelineErrorsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPipelinesForProjectPipelineListResponsePipelineErrorsType: %v", v)
	}
}

// ListPipelinesForProjectPipelineListResponsePipelineErrors - An error with a type and message.
type ListPipelinesForProjectPipelineListResponsePipelineErrors struct {
	// A human-readable error message.
	Message string `json:"message"`
	// The type of error.
	Type ListPipelinesForProjectPipelineListResponsePipelineErrorsType `json:"type"`
}

// ListPipelinesForProjectPipelineListResponsePipelineState - The current state of the pipeline.
type ListPipelinesForProjectPipelineListResponsePipelineState string

const (
	ListPipelinesForProjectPipelineListResponsePipelineStateCreated      ListPipelinesForProjectPipelineListResponsePipelineState = "created"
	ListPipelinesForProjectPipelineListResponsePipelineStateErrored      ListPipelinesForProjectPipelineListResponsePipelineState = "errored"
	ListPipelinesForProjectPipelineListResponsePipelineStateSetupPending ListPipelinesForProjectPipelineListResponsePipelineState = "setup-pending"
	ListPipelinesForProjectPipelineListResponsePipelineStateSetup        ListPipelinesForProjectPipelineListResponsePipelineState = "setup"
	ListPipelinesForProjectPipelineListResponsePipelineStatePending      ListPipelinesForProjectPipelineListResponsePipelineState = "pending"
)

func (e ListPipelinesForProjectPipelineListResponsePipelineState) ToPointer() *ListPipelinesForProjectPipelineListResponsePipelineState {
	return &e
}

func (e *ListPipelinesForProjectPipelineListResponsePipelineState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "errored":
		fallthrough
	case "setup-pending":
		fallthrough
	case "setup":
		fallthrough
	case "pending":
		*e = ListPipelinesForProjectPipelineListResponsePipelineState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPipelinesForProjectPipelineListResponsePipelineState: %v", v)
	}
}

// ListPipelinesForProjectPipelineListResponsePipelineTriggerActor - The user who triggered the Pipeline.
type ListPipelinesForProjectPipelineListResponsePipelineTriggerActor struct {
	// URL to the user's avatar on the VCS
	AvatarURL string `json:"avatar_url"`
	// The login information for the user on the VCS.
	Login string `json:"login"`
}

// ListPipelinesForProjectPipelineListResponsePipelineTriggerType - The type of trigger.
type ListPipelinesForProjectPipelineListResponsePipelineTriggerType string

const (
	ListPipelinesForProjectPipelineListResponsePipelineTriggerTypeScheduledPipeline ListPipelinesForProjectPipelineListResponsePipelineTriggerType = "scheduled_pipeline"
	ListPipelinesForProjectPipelineListResponsePipelineTriggerTypeExplicit          ListPipelinesForProjectPipelineListResponsePipelineTriggerType = "explicit"
	ListPipelinesForProjectPipelineListResponsePipelineTriggerTypeAPI               ListPipelinesForProjectPipelineListResponsePipelineTriggerType = "api"
	ListPipelinesForProjectPipelineListResponsePipelineTriggerTypeWebhook           ListPipelinesForProjectPipelineListResponsePipelineTriggerType = "webhook"
)

func (e ListPipelinesForProjectPipelineListResponsePipelineTriggerType) ToPointer() *ListPipelinesForProjectPipelineListResponsePipelineTriggerType {
	return &e
}

func (e *ListPipelinesForProjectPipelineListResponsePipelineTriggerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scheduled_pipeline":
		fallthrough
	case "explicit":
		fallthrough
	case "api":
		fallthrough
	case "webhook":
		*e = ListPipelinesForProjectPipelineListResponsePipelineTriggerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPipelinesForProjectPipelineListResponsePipelineTriggerType: %v", v)
	}
}

// ListPipelinesForProjectPipelineListResponsePipelineTrigger - A summary of the trigger.
type ListPipelinesForProjectPipelineListResponsePipelineTrigger struct {
	// The user who triggered the Pipeline.
	Actor ListPipelinesForProjectPipelineListResponsePipelineTriggerActor `json:"actor"`
	// The date and time the trigger was received.
	ReceivedAt time.Time `json:"received_at"`
	// The type of trigger.
	Type ListPipelinesForProjectPipelineListResponsePipelineTriggerType `json:"type"`
}

// ListPipelinesForProjectPipelineListResponsePipelineVcsCommit - The latest commit in the pipeline.
type ListPipelinesForProjectPipelineListResponsePipelineVcsCommit struct {
	// The body of the commit message.
	Body string `json:"body"`
	// The subject of the commit message.
	Subject string `json:"subject"`
}

// ListPipelinesForProjectPipelineListResponsePipelineVcs - VCS information for the pipeline.
type ListPipelinesForProjectPipelineListResponsePipelineVcs struct {
	// The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
	Branch *string `json:"branch,omitempty"`
	// The latest commit in the pipeline.
	Commit *ListPipelinesForProjectPipelineListResponsePipelineVcsCommit `json:"commit,omitempty"`
	// URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
	OriginRepositoryURL string `json:"origin_repository_url"`
	// Name of the VCS provider (e.g. GitHub, Bitbucket).
	ProviderName string `json:"provider_name"`
	// The code review id.
	ReviewID *string `json:"review_id,omitempty"`
	// The code review URL.
	ReviewURL *string `json:"review_url,omitempty"`
	// The code revision the pipeline ran.
	Revision string `json:"revision"`
	// The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
	Tag *string `json:"tag,omitempty"`
	// URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
	TargetRepositoryURL string `json:"target_repository_url"`
}

// ListPipelinesForProjectPipelineListResponsePipeline - A pipeline response.
type ListPipelinesForProjectPipelineListResponsePipeline struct {
	// The date and time the pipeline was created.
	CreatedAt time.Time `json:"created_at"`
	// A sequence of errors that have occurred within the pipeline.
	Errors []ListPipelinesForProjectPipelineListResponsePipelineErrors `json:"errors"`
	// The unique ID of the pipeline.
	ID string `json:"id"`
	// The number of the pipeline.
	Number int64 `json:"number"`
	// The project-slug for the pipeline.
	ProjectSlug string `json:"project_slug"`
	// The current state of the pipeline.
	State ListPipelinesForProjectPipelineListResponsePipelineState `json:"state"`
	// A summary of the trigger.
	Trigger           ListPipelinesForProjectPipelineListResponsePipelineTrigger `json:"trigger"`
	TriggerParameters map[string]interface{}                                     `json:"trigger_parameters,omitempty"`
	// The date and time the pipeline was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// VCS information for the pipeline.
	Vcs *ListPipelinesForProjectPipelineListResponsePipelineVcs `json:"vcs,omitempty"`
}

// ListPipelinesForProjectPipelineListResponse - List of pipelines
type ListPipelinesForProjectPipelineListResponse struct {
	Items []ListPipelinesForProjectPipelineListResponsePipeline `json:"items"`
	// A token to pass as a `page-token` query parameter to return the next page of results.
	NextPageToken string `json:"next_page_token"`
}

type ListPipelinesForProjectResponse struct {
	ContentType string
	// A sequence of pipelines.
	PipelineListResponse *ListPipelinesForProjectPipelineListResponse
	StatusCode           int
	RawResponse          *http.Response
	// Error response.
	ListPipelinesForProjectDefaultApplicationJSONObject *ListPipelinesForProjectDefaultApplicationJSON
}
